package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "move_meta".
 */
public class MoveMeta {

    private long MoveId;
    private long MetaCategoryId;
    private long MetaAilmentId;
    private Long MinHits;
    private Long MaxHits;
    private Long MinTurns;
    private Long MaxTurns;
    private long Drain;
    private long Healing;
    private long CritRate;
    private long AilmentChance;
    private long FlinchChance;
    private long StatChance;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MoveMetaDao myDao;

    private Moves Moves;
    private Long Moves__resolvedKey;

    private MoveMetaCategories MoveMetaCategories;
    private Long MoveMetaCategories__resolvedKey;

    private MoveMetaAilments MoveMetaAilments;
    private Long MoveMetaAilments__resolvedKey;


    public MoveMeta() {
    }

    public MoveMeta(long MoveId) {
        this.MoveId = MoveId;
    }

    public MoveMeta(long MoveId, long MetaCategoryId, long MetaAilmentId, Long MinHits, Long MaxHits, Long MinTurns, Long MaxTurns, long Drain, long Healing, long CritRate, long AilmentChance, long FlinchChance, long StatChance) {
        this.MoveId = MoveId;
        this.MetaCategoryId = MetaCategoryId;
        this.MetaAilmentId = MetaAilmentId;
        this.MinHits = MinHits;
        this.MaxHits = MaxHits;
        this.MinTurns = MinTurns;
        this.MaxTurns = MaxTurns;
        this.Drain = Drain;
        this.Healing = Healing;
        this.CritRate = CritRate;
        this.AilmentChance = AilmentChance;
        this.FlinchChance = FlinchChance;
        this.StatChance = StatChance;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMoveMetaDao() : null;
    }

    public long getMoveId() {
        return MoveId;
    }

    public void setMoveId(long MoveId) {
        this.MoveId = MoveId;
    }

    public long getMetaCategoryId() {
        return MetaCategoryId;
    }

    public void setMetaCategoryId(long MetaCategoryId) {
        this.MetaCategoryId = MetaCategoryId;
    }

    public long getMetaAilmentId() {
        return MetaAilmentId;
    }

    public void setMetaAilmentId(long MetaAilmentId) {
        this.MetaAilmentId = MetaAilmentId;
    }

    public Long getMinHits() {
        return MinHits;
    }

    public void setMinHits(Long MinHits) {
        this.MinHits = MinHits;
    }

    public Long getMaxHits() {
        return MaxHits;
    }

    public void setMaxHits(Long MaxHits) {
        this.MaxHits = MaxHits;
    }

    public Long getMinTurns() {
        return MinTurns;
    }

    public void setMinTurns(Long MinTurns) {
        this.MinTurns = MinTurns;
    }

    public Long getMaxTurns() {
        return MaxTurns;
    }

    public void setMaxTurns(Long MaxTurns) {
        this.MaxTurns = MaxTurns;
    }

    public long getDrain() {
        return Drain;
    }

    public void setDrain(long Drain) {
        this.Drain = Drain;
    }

    public long getHealing() {
        return Healing;
    }

    public void setHealing(long Healing) {
        this.Healing = Healing;
    }

    public long getCritRate() {
        return CritRate;
    }

    public void setCritRate(long CritRate) {
        this.CritRate = CritRate;
    }

    public long getAilmentChance() {
        return AilmentChance;
    }

    public void setAilmentChance(long AilmentChance) {
        this.AilmentChance = AilmentChance;
    }

    public long getFlinchChance() {
        return FlinchChance;
    }

    public void setFlinchChance(long FlinchChance) {
        this.FlinchChance = FlinchChance;
    }

    public long getStatChance() {
        return StatChance;
    }

    public void setStatChance(long StatChance) {
        this.StatChance = StatChance;
    }

    /** To-one relationship, resolved on first access. */
    public Moves getMoves() {
        long __key = this.MoveId;
        if (Moves__resolvedKey == null || !Moves__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovesDao targetDao = daoSession.getMovesDao();
            Moves MovesNew = targetDao.load(__key);
            synchronized (this) {
                Moves = MovesNew;
            	Moves__resolvedKey = __key;
            }
        }
        return Moves;
    }

    public void setMoves(Moves Moves) {
        if (Moves == null) {
            throw new DaoException("To-one property 'MoveId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Moves = Moves;
            MoveId = Moves.getId();
            Moves__resolvedKey = MoveId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MoveMetaCategories getMoveMetaCategories() {
        long __key = this.MetaCategoryId;
        if (MoveMetaCategories__resolvedKey == null || !MoveMetaCategories__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoveMetaCategoriesDao targetDao = daoSession.getMoveMetaCategoriesDao();
            MoveMetaCategories MoveMetaCategoriesNew = targetDao.load(__key);
            synchronized (this) {
                MoveMetaCategories = MoveMetaCategoriesNew;
            	MoveMetaCategories__resolvedKey = __key;
            }
        }
        return MoveMetaCategories;
    }

    public void setMoveMetaCategories(MoveMetaCategories MoveMetaCategories) {
        if (MoveMetaCategories == null) {
            throw new DaoException("To-one property 'MetaCategoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.MoveMetaCategories = MoveMetaCategories;
            MetaCategoryId = MoveMetaCategories.getId();
            MoveMetaCategories__resolvedKey = MetaCategoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MoveMetaAilments getMoveMetaAilments() {
        long __key = this.MetaAilmentId;
        if (MoveMetaAilments__resolvedKey == null || !MoveMetaAilments__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoveMetaAilmentsDao targetDao = daoSession.getMoveMetaAilmentsDao();
            MoveMetaAilments MoveMetaAilmentsNew = targetDao.load(__key);
            synchronized (this) {
                MoveMetaAilments = MoveMetaAilmentsNew;
            	MoveMetaAilments__resolvedKey = __key;
            }
        }
        return MoveMetaAilments;
    }

    public void setMoveMetaAilments(MoveMetaAilments MoveMetaAilments) {
        if (MoveMetaAilments == null) {
            throw new DaoException("To-one property 'MetaAilmentId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.MoveMetaAilments = MoveMetaAilments;
            MetaAilmentId = MoveMetaAilments.getId();
            MoveMetaAilments__resolvedKey = MetaAilmentId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
