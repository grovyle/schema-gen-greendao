package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.company.professor.ConquestPokemonEvolution;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "conquest_pokemon_evolution".
*/
public class ConquestPokemonEvolutionDao extends AbstractDao<ConquestPokemonEvolution, Long> {

    public static final String TABLENAME = "conquest_pokemon_evolution";

    /**
     * Properties of entity ConquestPokemonEvolution.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property EvolvedSpeciesId = new Property(0, long.class, "EvolvedSpeciesId", true, "evolved_species_id");
        public final static Property RequiredStatId = new Property(1, Long.class, "RequiredStatId", false, "required_stat_id");
        public final static Property MinimumStat = new Property(2, Long.class, "MinimumStat", false, "minimum_stat");
        public final static Property MinimumLink = new Property(3, Long.class, "MinimumLink", false, "minimum_link");
        public final static Property KingdomId = new Property(4, Long.class, "KingdomId", false, "kingdom_id");
        public final static Property WarriorGenderId = new Property(5, Long.class, "WarriorGenderId", false, "warrior_gender_id");
        public final static Property ItemId = new Property(6, Long.class, "ItemId", false, "item_id");
        public final static Property RecruitingKoRequired = new Property(7, boolean.class, "RecruitingKoRequired", false, "recruiting_ko_required");
    };

    private DaoSession daoSession;


    public ConquestPokemonEvolutionDao(DaoConfig config) {
        super(config);
    }
    
    public ConquestPokemonEvolutionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"conquest_pokemon_evolution\" (" + //
                "\"evolved_species_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: EvolvedSpeciesId
                "\"required_stat_id\" INTEGER," + // 1: RequiredStatId
                "\"minimum_stat\" INTEGER," + // 2: MinimumStat
                "\"minimum_link\" INTEGER," + // 3: MinimumLink
                "\"kingdom_id\" INTEGER," + // 4: KingdomId
                "\"warrior_gender_id\" INTEGER," + // 5: WarriorGenderId
                "\"item_id\" INTEGER," + // 6: ItemId
                "\"recruiting_ko_required\" INTEGER NOT NULL );"); // 7: RecruitingKoRequired
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"conquest_pokemon_evolution\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ConquestPokemonEvolution entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getEvolvedSpeciesId());
 
        Long RequiredStatId = entity.getRequiredStatId();
        if (RequiredStatId != null) {
            stmt.bindLong(2, RequiredStatId);
        }
 
        Long MinimumStat = entity.getMinimumStat();
        if (MinimumStat != null) {
            stmt.bindLong(3, MinimumStat);
        }
 
        Long MinimumLink = entity.getMinimumLink();
        if (MinimumLink != null) {
            stmt.bindLong(4, MinimumLink);
        }
 
        Long KingdomId = entity.getKingdomId();
        if (KingdomId != null) {
            stmt.bindLong(5, KingdomId);
        }
 
        Long WarriorGenderId = entity.getWarriorGenderId();
        if (WarriorGenderId != null) {
            stmt.bindLong(6, WarriorGenderId);
        }
 
        Long ItemId = entity.getItemId();
        if (ItemId != null) {
            stmt.bindLong(7, ItemId);
        }
        stmt.bindLong(8, entity.getRecruitingKoRequired() ? 1L: 0L);
    }

    @Override
    protected void attachEntity(ConquestPokemonEvolution entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ConquestPokemonEvolution readEntity(Cursor cursor, int offset) {
        ConquestPokemonEvolution entity = new ConquestPokemonEvolution( //
            cursor.getLong(offset + 0), // EvolvedSpeciesId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // RequiredStatId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // MinimumStat
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // MinimumLink
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // KingdomId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // WarriorGenderId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // ItemId
            cursor.getShort(offset + 7) != 0 // RecruitingKoRequired
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ConquestPokemonEvolution entity, int offset) {
        entity.setEvolvedSpeciesId(cursor.getLong(offset + 0));
        entity.setRequiredStatId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMinimumStat(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMinimumLink(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setKingdomId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setWarriorGenderId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setItemId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRecruitingKoRequired(cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ConquestPokemonEvolution entity, long rowId) {
        entity.setEvolvedSpeciesId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ConquestPokemonEvolution entity) {
        if(entity != null) {
            return entity.getEvolvedSpeciesId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPokemonSpeciesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getConquestStatsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getConquestKingdomsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getGendersDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getItemsDao().getAllColumns());
            builder.append(" FROM conquest_pokemon_evolution T");
            builder.append(" LEFT JOIN pokemon_species T0 ON T.\"evolved_species_id\"=T0.\"id\"");
            builder.append(" LEFT JOIN conquest_stats T1 ON T.\"required_stat_id\"=T1.\"id\"");
            builder.append(" LEFT JOIN conquest_kingdoms T2 ON T.\"kingdom_id\"=T2.\"id\"");
            builder.append(" LEFT JOIN genders T3 ON T.\"warrior_gender_id\"=T3.\"id\"");
            builder.append(" LEFT JOIN items T4 ON T.\"item_id\"=T4.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ConquestPokemonEvolution loadCurrentDeep(Cursor cursor, boolean lock) {
        ConquestPokemonEvolution entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PokemonSpecies PokemonSpecies = loadCurrentOther(daoSession.getPokemonSpeciesDao(), cursor, offset);
         if(PokemonSpecies != null) {
            entity.setPokemonSpecies(PokemonSpecies);
        }
        offset += daoSession.getPokemonSpeciesDao().getAllColumns().length;

        ConquestStats ConquestStats = loadCurrentOther(daoSession.getConquestStatsDao(), cursor, offset);
        entity.setConquestStats(ConquestStats);
        offset += daoSession.getConquestStatsDao().getAllColumns().length;

        ConquestKingdoms ConquestKingdoms = loadCurrentOther(daoSession.getConquestKingdomsDao(), cursor, offset);
        entity.setConquestKingdoms(ConquestKingdoms);
        offset += daoSession.getConquestKingdomsDao().getAllColumns().length;

        Genders Genders = loadCurrentOther(daoSession.getGendersDao(), cursor, offset);
        entity.setGenders(Genders);
        offset += daoSession.getGendersDao().getAllColumns().length;

        Items Items = loadCurrentOther(daoSession.getItemsDao(), cursor, offset);
        entity.setItems(Items);

        return entity;    
    }

    public ConquestPokemonEvolution loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ConquestPokemonEvolution> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ConquestPokemonEvolution> list = new ArrayList<ConquestPokemonEvolution>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ConquestPokemonEvolution> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ConquestPokemonEvolution> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
