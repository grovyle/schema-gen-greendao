package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "item_categories".
 */
public class ItemCategories {

    private long Id;
    private long PocketId;
    /** Not-null value. */
    private String Identifier;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemCategoriesDao myDao;

    private ItemPockets ItemPockets;
    private Long ItemPockets__resolvedKey;


    public ItemCategories() {
    }

    public ItemCategories(long Id) {
        this.Id = Id;
    }

    public ItemCategories(long Id, long PocketId, String Identifier) {
        this.Id = Id;
        this.PocketId = PocketId;
        this.Identifier = Identifier;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemCategoriesDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    public long getPocketId() {
        return PocketId;
    }

    public void setPocketId(long PocketId) {
        this.PocketId = PocketId;
    }

    /** Not-null value. */
    public String getIdentifier() {
        return Identifier;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIdentifier(String Identifier) {
        this.Identifier = Identifier;
    }

    /** To-one relationship, resolved on first access. */
    public ItemPockets getItemPockets() {
        long __key = this.PocketId;
        if (ItemPockets__resolvedKey == null || !ItemPockets__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemPocketsDao targetDao = daoSession.getItemPocketsDao();
            ItemPockets ItemPocketsNew = targetDao.load(__key);
            synchronized (this) {
                ItemPockets = ItemPocketsNew;
            	ItemPockets__resolvedKey = __key;
            }
        }
        return ItemPockets;
    }

    public void setItemPockets(ItemPockets ItemPockets) {
        if (ItemPockets == null) {
            throw new DaoException("To-one property 'PocketId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ItemPockets = ItemPockets;
            PocketId = ItemPockets.getId();
            ItemPockets__resolvedKey = PocketId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
