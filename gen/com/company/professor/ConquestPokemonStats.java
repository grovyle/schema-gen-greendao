package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "conquest_pokemon_stats".
 */
public class ConquestPokemonStats {

    private long PokemonSpeciesId;
    private long ConquestStatId;
    private long BaseStat;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConquestPokemonStatsDao myDao;

    private PokemonSpecies PokemonSpecies;
    private Long PokemonSpecies__resolvedKey;

    private ConquestStats ConquestStats;
    private Long ConquestStats__resolvedKey;


    public ConquestPokemonStats() {
    }

    public ConquestPokemonStats(long PokemonSpeciesId) {
        this.PokemonSpeciesId = PokemonSpeciesId;
    }

    public ConquestPokemonStats(long PokemonSpeciesId, long ConquestStatId, long BaseStat) {
        this.PokemonSpeciesId = PokemonSpeciesId;
        this.ConquestStatId = ConquestStatId;
        this.BaseStat = BaseStat;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConquestPokemonStatsDao() : null;
    }

    public long getPokemonSpeciesId() {
        return PokemonSpeciesId;
    }

    public void setPokemonSpeciesId(long PokemonSpeciesId) {
        this.PokemonSpeciesId = PokemonSpeciesId;
    }

    public long getConquestStatId() {
        return ConquestStatId;
    }

    public void setConquestStatId(long ConquestStatId) {
        this.ConquestStatId = ConquestStatId;
    }

    public long getBaseStat() {
        return BaseStat;
    }

    public void setBaseStat(long BaseStat) {
        this.BaseStat = BaseStat;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonSpecies getPokemonSpecies() {
        long __key = this.PokemonSpeciesId;
        if (PokemonSpecies__resolvedKey == null || !PokemonSpecies__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonSpeciesDao targetDao = daoSession.getPokemonSpeciesDao();
            PokemonSpecies PokemonSpeciesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonSpecies = PokemonSpeciesNew;
            	PokemonSpecies__resolvedKey = __key;
            }
        }
        return PokemonSpecies;
    }

    public void setPokemonSpecies(PokemonSpecies PokemonSpecies) {
        if (PokemonSpecies == null) {
            throw new DaoException("To-one property 'PokemonSpeciesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonSpecies = PokemonSpecies;
            PokemonSpeciesId = PokemonSpecies.getId();
            PokemonSpecies__resolvedKey = PokemonSpeciesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConquestStats getConquestStats() {
        long __key = this.ConquestStatId;
        if (ConquestStats__resolvedKey == null || !ConquestStats__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestStatsDao targetDao = daoSession.getConquestStatsDao();
            ConquestStats ConquestStatsNew = targetDao.load(__key);
            synchronized (this) {
                ConquestStats = ConquestStatsNew;
            	ConquestStats__resolvedKey = __key;
            }
        }
        return ConquestStats;
    }

    public void setConquestStats(ConquestStats ConquestStats) {
        if (ConquestStats == null) {
            throw new DaoException("To-one property 'ConquestStatId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ConquestStats = ConquestStats;
            ConquestStatId = ConquestStats.getId();
            ConquestStats__resolvedKey = ConquestStatId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
