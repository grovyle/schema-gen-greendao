package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.company.professor.ConquestWarriorRankStatMap;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "conquest_warrior_rank_stat_map".
*/
public class ConquestWarriorRankStatMapDao extends AbstractDao<ConquestWarriorRankStatMap, Long> {

    public static final String TABLENAME = "conquest_warrior_rank_stat_map";

    /**
     * Properties of entity ConquestWarriorRankStatMap.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property WarriorRankId = new Property(0, long.class, "WarriorRankId", true, "warrior_rank_id");
        public final static Property WarriorStatId = new Property(1, long.class, "WarriorStatId", false, "warrior_stat_id");
        public final static Property BaseStat = new Property(2, long.class, "BaseStat", false, "base_stat");
    };

    private DaoSession daoSession;


    public ConquestWarriorRankStatMapDao(DaoConfig config) {
        super(config);
    }
    
    public ConquestWarriorRankStatMapDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"conquest_warrior_rank_stat_map\" (" + //
                "\"warrior_rank_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: WarriorRankId
                "\"warrior_stat_id\" INTEGER NOT NULL ," + // 1: WarriorStatId
                "\"base_stat\" INTEGER NOT NULL );"); // 2: BaseStat
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_conquest_warrior_rank_stat_map_warrior_rank_id_warrior_stat_id ON conquest_warrior_rank_stat_map" +
                " (\"warrior_rank_id\",\"warrior_stat_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"conquest_warrior_rank_stat_map\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ConquestWarriorRankStatMap entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWarriorRankId());
        stmt.bindLong(2, entity.getWarriorStatId());
        stmt.bindLong(3, entity.getBaseStat());
    }

    @Override
    protected void attachEntity(ConquestWarriorRankStatMap entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ConquestWarriorRankStatMap readEntity(Cursor cursor, int offset) {
        ConquestWarriorRankStatMap entity = new ConquestWarriorRankStatMap( //
            cursor.getLong(offset + 0), // WarriorRankId
            cursor.getLong(offset + 1), // WarriorStatId
            cursor.getLong(offset + 2) // BaseStat
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ConquestWarriorRankStatMap entity, int offset) {
        entity.setWarriorRankId(cursor.getLong(offset + 0));
        entity.setWarriorStatId(cursor.getLong(offset + 1));
        entity.setBaseStat(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ConquestWarriorRankStatMap entity, long rowId) {
        entity.setWarriorRankId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ConquestWarriorRankStatMap entity) {
        if(entity != null) {
            return entity.getWarriorRankId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getConquestWarriorRanksDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getConquestWarriorStatsDao().getAllColumns());
            builder.append(" FROM conquest_warrior_rank_stat_map T");
            builder.append(" LEFT JOIN conquest_warrior_ranks T0 ON T.\"warrior_rank_id\"=T0.\"id\"");
            builder.append(" LEFT JOIN conquest_warrior_stats T1 ON T.\"warrior_stat_id\"=T1.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ConquestWarriorRankStatMap loadCurrentDeep(Cursor cursor, boolean lock) {
        ConquestWarriorRankStatMap entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ConquestWarriorRanks ConquestWarriorRanks = loadCurrentOther(daoSession.getConquestWarriorRanksDao(), cursor, offset);
         if(ConquestWarriorRanks != null) {
            entity.setConquestWarriorRanks(ConquestWarriorRanks);
        }
        offset += daoSession.getConquestWarriorRanksDao().getAllColumns().length;

        ConquestWarriorStats ConquestWarriorStats = loadCurrentOther(daoSession.getConquestWarriorStatsDao(), cursor, offset);
         if(ConquestWarriorStats != null) {
            entity.setConquestWarriorStats(ConquestWarriorStats);
        }

        return entity;    
    }

    public ConquestWarriorRankStatMap loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ConquestWarriorRankStatMap> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ConquestWarriorRankStatMap> list = new ArrayList<ConquestWarriorRankStatMap>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ConquestWarriorRankStatMap> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ConquestWarriorRankStatMap> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
