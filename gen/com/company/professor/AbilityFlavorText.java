package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ability_flavor_text".
 */
public class AbilityFlavorText {

    private long AbilityId;
    private long VersionGroupId;
    private long LanguageId;
    /** Not-null value. */
    private String FlavorText;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AbilityFlavorTextDao myDao;

    private Abilities Abilities;
    private Long Abilities__resolvedKey;

    private VersionGroups VersionGroups;
    private Long VersionGroups__resolvedKey;

    private Languages Languages;
    private Long Languages__resolvedKey;


    public AbilityFlavorText() {
    }

    public AbilityFlavorText(long AbilityId) {
        this.AbilityId = AbilityId;
    }

    public AbilityFlavorText(long AbilityId, long VersionGroupId, long LanguageId, String FlavorText) {
        this.AbilityId = AbilityId;
        this.VersionGroupId = VersionGroupId;
        this.LanguageId = LanguageId;
        this.FlavorText = FlavorText;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAbilityFlavorTextDao() : null;
    }

    public long getAbilityId() {
        return AbilityId;
    }

    public void setAbilityId(long AbilityId) {
        this.AbilityId = AbilityId;
    }

    public long getVersionGroupId() {
        return VersionGroupId;
    }

    public void setVersionGroupId(long VersionGroupId) {
        this.VersionGroupId = VersionGroupId;
    }

    public long getLanguageId() {
        return LanguageId;
    }

    public void setLanguageId(long LanguageId) {
        this.LanguageId = LanguageId;
    }

    /** Not-null value. */
    public String getFlavorText() {
        return FlavorText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFlavorText(String FlavorText) {
        this.FlavorText = FlavorText;
    }

    /** To-one relationship, resolved on first access. */
    public Abilities getAbilities() {
        long __key = this.AbilityId;
        if (Abilities__resolvedKey == null || !Abilities__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbilitiesDao targetDao = daoSession.getAbilitiesDao();
            Abilities AbilitiesNew = targetDao.load(__key);
            synchronized (this) {
                Abilities = AbilitiesNew;
            	Abilities__resolvedKey = __key;
            }
        }
        return Abilities;
    }

    public void setAbilities(Abilities Abilities) {
        if (Abilities == null) {
            throw new DaoException("To-one property 'AbilityId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Abilities = Abilities;
            AbilityId = Abilities.getId();
            Abilities__resolvedKey = AbilityId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public VersionGroups getVersionGroups() {
        long __key = this.VersionGroupId;
        if (VersionGroups__resolvedKey == null || !VersionGroups__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionGroupsDao targetDao = daoSession.getVersionGroupsDao();
            VersionGroups VersionGroupsNew = targetDao.load(__key);
            synchronized (this) {
                VersionGroups = VersionGroupsNew;
            	VersionGroups__resolvedKey = __key;
            }
        }
        return VersionGroups;
    }

    public void setVersionGroups(VersionGroups VersionGroups) {
        if (VersionGroups == null) {
            throw new DaoException("To-one property 'VersionGroupId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.VersionGroups = VersionGroups;
            VersionGroupId = VersionGroups.getId();
            VersionGroups__resolvedKey = VersionGroupId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Languages getLanguages() {
        long __key = this.LanguageId;
        if (Languages__resolvedKey == null || !Languages__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagesDao targetDao = daoSession.getLanguagesDao();
            Languages LanguagesNew = targetDao.load(__key);
            synchronized (this) {
                Languages = LanguagesNew;
            	Languages__resolvedKey = __key;
            }
        }
        return Languages;
    }

    public void setLanguages(Languages Languages) {
        if (Languages == null) {
            throw new DaoException("To-one property 'LanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Languages = Languages;
            LanguageId = Languages.getId();
            Languages__resolvedKey = LanguageId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
