package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.company.professor.MoveChangelog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "move_changelog".
*/
public class MoveChangelogDao extends AbstractDao<MoveChangelog, Long> {

    public static final String TABLENAME = "move_changelog";

    /**
     * Properties of entity MoveChangelog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MoveId = new Property(0, long.class, "MoveId", true, "move_id");
        public final static Property ChangedInVersionGroupId = new Property(1, long.class, "ChangedInVersionGroupId", false, "changed_in_version_group_id");
        public final static Property TypeId = new Property(2, Long.class, "TypeId", false, "type_id");
        public final static Property Power = new Property(3, Integer.class, "Power", false, "power");
        public final static Property Pp = new Property(4, Integer.class, "Pp", false, "pp");
        public final static Property Accuracy = new Property(5, Integer.class, "Accuracy", false, "accuracy");
        public final static Property EffectId = new Property(6, Long.class, "EffectId", false, "effect_id");
        public final static Property EffectChance = new Property(7, Long.class, "EffectChance", false, "effect_chance");
    };

    private DaoSession daoSession;


    public MoveChangelogDao(DaoConfig config) {
        super(config);
    }
    
    public MoveChangelogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"move_changelog\" (" + //
                "\"move_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: MoveId
                "\"changed_in_version_group_id\" INTEGER NOT NULL ," + // 1: ChangedInVersionGroupId
                "\"type_id\" INTEGER," + // 2: TypeId
                "\"power\" INTEGER," + // 3: Power
                "\"pp\" INTEGER," + // 4: Pp
                "\"accuracy\" INTEGER," + // 5: Accuracy
                "\"effect_id\" INTEGER," + // 6: EffectId
                "\"effect_chance\" INTEGER);"); // 7: EffectChance
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_move_changelog_move_id_changed_in_version_group_id ON move_changelog" +
                " (\"move_id\",\"changed_in_version_group_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"move_changelog\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MoveChangelog entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMoveId());
        stmt.bindLong(2, entity.getChangedInVersionGroupId());
 
        Long TypeId = entity.getTypeId();
        if (TypeId != null) {
            stmt.bindLong(3, TypeId);
        }
 
        Integer Power = entity.getPower();
        if (Power != null) {
            stmt.bindLong(4, Power);
        }
 
        Integer Pp = entity.getPp();
        if (Pp != null) {
            stmt.bindLong(5, Pp);
        }
 
        Integer Accuracy = entity.getAccuracy();
        if (Accuracy != null) {
            stmt.bindLong(6, Accuracy);
        }
 
        Long EffectId = entity.getEffectId();
        if (EffectId != null) {
            stmt.bindLong(7, EffectId);
        }
 
        Long EffectChance = entity.getEffectChance();
        if (EffectChance != null) {
            stmt.bindLong(8, EffectChance);
        }
    }

    @Override
    protected void attachEntity(MoveChangelog entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MoveChangelog readEntity(Cursor cursor, int offset) {
        MoveChangelog entity = new MoveChangelog( //
            cursor.getLong(offset + 0), // MoveId
            cursor.getLong(offset + 1), // ChangedInVersionGroupId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // TypeId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Power
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Pp
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Accuracy
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // EffectId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // EffectChance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MoveChangelog entity, int offset) {
        entity.setMoveId(cursor.getLong(offset + 0));
        entity.setChangedInVersionGroupId(cursor.getLong(offset + 1));
        entity.setTypeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPower(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPp(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAccuracy(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setEffectId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setEffectChance(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MoveChangelog entity, long rowId) {
        entity.setMoveId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MoveChangelog entity) {
        if(entity != null) {
            return entity.getMoveId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMovesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVersionGroupsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getTypesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getMoveEffectsDao().getAllColumns());
            builder.append(" FROM move_changelog T");
            builder.append(" LEFT JOIN moves T0 ON T.\"move_id\"=T0.\"id\"");
            builder.append(" LEFT JOIN version_groups T1 ON T.\"changed_in_version_group_id\"=T1.\"id\"");
            builder.append(" LEFT JOIN types T2 ON T.\"type_id\"=T2.\"id\"");
            builder.append(" LEFT JOIN move_effects T3 ON T.\"effect_id\"=T3.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MoveChangelog loadCurrentDeep(Cursor cursor, boolean lock) {
        MoveChangelog entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Moves Moves = loadCurrentOther(daoSession.getMovesDao(), cursor, offset);
         if(Moves != null) {
            entity.setMoves(Moves);
        }
        offset += daoSession.getMovesDao().getAllColumns().length;

        VersionGroups VersionGroups = loadCurrentOther(daoSession.getVersionGroupsDao(), cursor, offset);
         if(VersionGroups != null) {
            entity.setVersionGroups(VersionGroups);
        }
        offset += daoSession.getVersionGroupsDao().getAllColumns().length;

        Types Types = loadCurrentOther(daoSession.getTypesDao(), cursor, offset);
        entity.setTypes(Types);
        offset += daoSession.getTypesDao().getAllColumns().length;

        MoveEffects MoveEffects = loadCurrentOther(daoSession.getMoveEffectsDao(), cursor, offset);
        entity.setMoveEffects(MoveEffects);

        return entity;    
    }

    public MoveChangelog loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MoveChangelog> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MoveChangelog> list = new ArrayList<MoveChangelog>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MoveChangelog> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MoveChangelog> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
