package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "item_flag_map".
 */
public class ItemFlagMap {

    private long ItemId;
    private long ItemFlagId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemFlagMapDao myDao;

    private Items Items;
    private Long Items__resolvedKey;

    private ItemFlags ItemFlags;
    private Long ItemFlags__resolvedKey;


    public ItemFlagMap() {
    }

    public ItemFlagMap(long ItemId) {
        this.ItemId = ItemId;
    }

    public ItemFlagMap(long ItemId, long ItemFlagId) {
        this.ItemId = ItemId;
        this.ItemFlagId = ItemFlagId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemFlagMapDao() : null;
    }

    public long getItemId() {
        return ItemId;
    }

    public void setItemId(long ItemId) {
        this.ItemId = ItemId;
    }

    public long getItemFlagId() {
        return ItemFlagId;
    }

    public void setItemFlagId(long ItemFlagId) {
        this.ItemFlagId = ItemFlagId;
    }

    /** To-one relationship, resolved on first access. */
    public Items getItems() {
        long __key = this.ItemId;
        if (Items__resolvedKey == null || !Items__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemsDao targetDao = daoSession.getItemsDao();
            Items ItemsNew = targetDao.load(__key);
            synchronized (this) {
                Items = ItemsNew;
            	Items__resolvedKey = __key;
            }
        }
        return Items;
    }

    public void setItems(Items Items) {
        if (Items == null) {
            throw new DaoException("To-one property 'ItemId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Items = Items;
            ItemId = Items.getId();
            Items__resolvedKey = ItemId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ItemFlags getItemFlags() {
        long __key = this.ItemFlagId;
        if (ItemFlags__resolvedKey == null || !ItemFlags__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemFlagsDao targetDao = daoSession.getItemFlagsDao();
            ItemFlags ItemFlagsNew = targetDao.load(__key);
            synchronized (this) {
                ItemFlags = ItemFlagsNew;
            	ItemFlags__resolvedKey = __key;
            }
        }
        return ItemFlags;
    }

    public void setItemFlags(ItemFlags ItemFlags) {
        if (ItemFlags == null) {
            throw new DaoException("To-one property 'ItemFlagId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ItemFlags = ItemFlags;
            ItemFlagId = ItemFlags.getId();
            ItemFlags__resolvedKey = ItemFlagId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
