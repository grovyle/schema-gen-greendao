package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "conquest_warrior_rank_stat_map".
 */
public class ConquestWarriorRankStatMap {

    private long WarriorRankId;
    private long WarriorStatId;
    private long BaseStat;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConquestWarriorRankStatMapDao myDao;

    private ConquestWarriorRanks ConquestWarriorRanks;
    private Long ConquestWarriorRanks__resolvedKey;

    private ConquestWarriorStats ConquestWarriorStats;
    private Long ConquestWarriorStats__resolvedKey;


    public ConquestWarriorRankStatMap() {
    }

    public ConquestWarriorRankStatMap(long WarriorRankId) {
        this.WarriorRankId = WarriorRankId;
    }

    public ConquestWarriorRankStatMap(long WarriorRankId, long WarriorStatId, long BaseStat) {
        this.WarriorRankId = WarriorRankId;
        this.WarriorStatId = WarriorStatId;
        this.BaseStat = BaseStat;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConquestWarriorRankStatMapDao() : null;
    }

    public long getWarriorRankId() {
        return WarriorRankId;
    }

    public void setWarriorRankId(long WarriorRankId) {
        this.WarriorRankId = WarriorRankId;
    }

    public long getWarriorStatId() {
        return WarriorStatId;
    }

    public void setWarriorStatId(long WarriorStatId) {
        this.WarriorStatId = WarriorStatId;
    }

    public long getBaseStat() {
        return BaseStat;
    }

    public void setBaseStat(long BaseStat) {
        this.BaseStat = BaseStat;
    }

    /** To-one relationship, resolved on first access. */
    public ConquestWarriorRanks getConquestWarriorRanks() {
        long __key = this.WarriorRankId;
        if (ConquestWarriorRanks__resolvedKey == null || !ConquestWarriorRanks__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestWarriorRanksDao targetDao = daoSession.getConquestWarriorRanksDao();
            ConquestWarriorRanks ConquestWarriorRanksNew = targetDao.load(__key);
            synchronized (this) {
                ConquestWarriorRanks = ConquestWarriorRanksNew;
            	ConquestWarriorRanks__resolvedKey = __key;
            }
        }
        return ConquestWarriorRanks;
    }

    public void setConquestWarriorRanks(ConquestWarriorRanks ConquestWarriorRanks) {
        if (ConquestWarriorRanks == null) {
            throw new DaoException("To-one property 'WarriorRankId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ConquestWarriorRanks = ConquestWarriorRanks;
            WarriorRankId = ConquestWarriorRanks.getId();
            ConquestWarriorRanks__resolvedKey = WarriorRankId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConquestWarriorStats getConquestWarriorStats() {
        long __key = this.WarriorStatId;
        if (ConquestWarriorStats__resolvedKey == null || !ConquestWarriorStats__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestWarriorStatsDao targetDao = daoSession.getConquestWarriorStatsDao();
            ConquestWarriorStats ConquestWarriorStatsNew = targetDao.load(__key);
            synchronized (this) {
                ConquestWarriorStats = ConquestWarriorStatsNew;
            	ConquestWarriorStats__resolvedKey = __key;
            }
        }
        return ConquestWarriorStats;
    }

    public void setConquestWarriorStats(ConquestWarriorStats ConquestWarriorStats) {
        if (ConquestWarriorStats == null) {
            throw new DaoException("To-one property 'WarriorStatId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ConquestWarriorStats = ConquestWarriorStats;
            WarriorStatId = ConquestWarriorStats.getId();
            ConquestWarriorStats__resolvedKey = WarriorStatId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
