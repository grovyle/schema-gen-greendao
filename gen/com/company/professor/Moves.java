package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "moves".
 */
public class Moves {

    private long Id;
    /** Not-null value. */
    private String Identifier;
    private long GenerationId;
    private long TypeId;
    private Integer Power;
    private Integer Pp;
    private Integer Accuracy;
    private int Priority;
    private long TargetId;
    private long DamageClassId;
    private long EffectId;
    private Long EffectChance;
    private Long ContestTypeId;
    private Long ContestEffectId;
    private Long SuperContestEffectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MovesDao myDao;

    private Generations Generations;
    private Long Generations__resolvedKey;

    private Types Types;
    private Long Types__resolvedKey;

    private MoveTargets MoveTargets;
    private Long MoveTargets__resolvedKey;

    private MoveDamageClasses MoveDamageClasses;
    private Long MoveDamageClasses__resolvedKey;

    private MoveEffects MoveEffects;
    private Long MoveEffects__resolvedKey;

    private ContestTypes ContestTypes;
    private Long ContestTypes__resolvedKey;

    private ContestEffects ContestEffects;
    private Long ContestEffects__resolvedKey;

    private SuperContestEffects SuperContestEffects;
    private Long SuperContestEffects__resolvedKey;


    public Moves() {
    }

    public Moves(long Id) {
        this.Id = Id;
    }

    public Moves(long Id, String Identifier, long GenerationId, long TypeId, Integer Power, Integer Pp, Integer Accuracy, int Priority, long TargetId, long DamageClassId, long EffectId, Long EffectChance, Long ContestTypeId, Long ContestEffectId, Long SuperContestEffectId) {
        this.Id = Id;
        this.Identifier = Identifier;
        this.GenerationId = GenerationId;
        this.TypeId = TypeId;
        this.Power = Power;
        this.Pp = Pp;
        this.Accuracy = Accuracy;
        this.Priority = Priority;
        this.TargetId = TargetId;
        this.DamageClassId = DamageClassId;
        this.EffectId = EffectId;
        this.EffectChance = EffectChance;
        this.ContestTypeId = ContestTypeId;
        this.ContestEffectId = ContestEffectId;
        this.SuperContestEffectId = SuperContestEffectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMovesDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    /** Not-null value. */
    public String getIdentifier() {
        return Identifier;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIdentifier(String Identifier) {
        this.Identifier = Identifier;
    }

    public long getGenerationId() {
        return GenerationId;
    }

    public void setGenerationId(long GenerationId) {
        this.GenerationId = GenerationId;
    }

    public long getTypeId() {
        return TypeId;
    }

    public void setTypeId(long TypeId) {
        this.TypeId = TypeId;
    }

    public Integer getPower() {
        return Power;
    }

    public void setPower(Integer Power) {
        this.Power = Power;
    }

    public Integer getPp() {
        return Pp;
    }

    public void setPp(Integer Pp) {
        this.Pp = Pp;
    }

    public Integer getAccuracy() {
        return Accuracy;
    }

    public void setAccuracy(Integer Accuracy) {
        this.Accuracy = Accuracy;
    }

    public int getPriority() {
        return Priority;
    }

    public void setPriority(int Priority) {
        this.Priority = Priority;
    }

    public long getTargetId() {
        return TargetId;
    }

    public void setTargetId(long TargetId) {
        this.TargetId = TargetId;
    }

    public long getDamageClassId() {
        return DamageClassId;
    }

    public void setDamageClassId(long DamageClassId) {
        this.DamageClassId = DamageClassId;
    }

    public long getEffectId() {
        return EffectId;
    }

    public void setEffectId(long EffectId) {
        this.EffectId = EffectId;
    }

    public Long getEffectChance() {
        return EffectChance;
    }

    public void setEffectChance(Long EffectChance) {
        this.EffectChance = EffectChance;
    }

    public Long getContestTypeId() {
        return ContestTypeId;
    }

    public void setContestTypeId(Long ContestTypeId) {
        this.ContestTypeId = ContestTypeId;
    }

    public Long getContestEffectId() {
        return ContestEffectId;
    }

    public void setContestEffectId(Long ContestEffectId) {
        this.ContestEffectId = ContestEffectId;
    }

    public Long getSuperContestEffectId() {
        return SuperContestEffectId;
    }

    public void setSuperContestEffectId(Long SuperContestEffectId) {
        this.SuperContestEffectId = SuperContestEffectId;
    }

    /** To-one relationship, resolved on first access. */
    public Generations getGenerations() {
        long __key = this.GenerationId;
        if (Generations__resolvedKey == null || !Generations__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GenerationsDao targetDao = daoSession.getGenerationsDao();
            Generations GenerationsNew = targetDao.load(__key);
            synchronized (this) {
                Generations = GenerationsNew;
            	Generations__resolvedKey = __key;
            }
        }
        return Generations;
    }

    public void setGenerations(Generations Generations) {
        if (Generations == null) {
            throw new DaoException("To-one property 'GenerationId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Generations = Generations;
            GenerationId = Generations.getId();
            Generations__resolvedKey = GenerationId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Types getTypes() {
        long __key = this.TypeId;
        if (Types__resolvedKey == null || !Types__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TypesDao targetDao = daoSession.getTypesDao();
            Types TypesNew = targetDao.load(__key);
            synchronized (this) {
                Types = TypesNew;
            	Types__resolvedKey = __key;
            }
        }
        return Types;
    }

    public void setTypes(Types Types) {
        if (Types == null) {
            throw new DaoException("To-one property 'TypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Types = Types;
            TypeId = Types.getId();
            Types__resolvedKey = TypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MoveTargets getMoveTargets() {
        long __key = this.TargetId;
        if (MoveTargets__resolvedKey == null || !MoveTargets__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoveTargetsDao targetDao = daoSession.getMoveTargetsDao();
            MoveTargets MoveTargetsNew = targetDao.load(__key);
            synchronized (this) {
                MoveTargets = MoveTargetsNew;
            	MoveTargets__resolvedKey = __key;
            }
        }
        return MoveTargets;
    }

    public void setMoveTargets(MoveTargets MoveTargets) {
        if (MoveTargets == null) {
            throw new DaoException("To-one property 'TargetId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.MoveTargets = MoveTargets;
            TargetId = MoveTargets.getId();
            MoveTargets__resolvedKey = TargetId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MoveDamageClasses getMoveDamageClasses() {
        long __key = this.DamageClassId;
        if (MoveDamageClasses__resolvedKey == null || !MoveDamageClasses__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoveDamageClassesDao targetDao = daoSession.getMoveDamageClassesDao();
            MoveDamageClasses MoveDamageClassesNew = targetDao.load(__key);
            synchronized (this) {
                MoveDamageClasses = MoveDamageClassesNew;
            	MoveDamageClasses__resolvedKey = __key;
            }
        }
        return MoveDamageClasses;
    }

    public void setMoveDamageClasses(MoveDamageClasses MoveDamageClasses) {
        if (MoveDamageClasses == null) {
            throw new DaoException("To-one property 'DamageClassId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.MoveDamageClasses = MoveDamageClasses;
            DamageClassId = MoveDamageClasses.getId();
            MoveDamageClasses__resolvedKey = DamageClassId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MoveEffects getMoveEffects() {
        long __key = this.EffectId;
        if (MoveEffects__resolvedKey == null || !MoveEffects__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoveEffectsDao targetDao = daoSession.getMoveEffectsDao();
            MoveEffects MoveEffectsNew = targetDao.load(__key);
            synchronized (this) {
                MoveEffects = MoveEffectsNew;
            	MoveEffects__resolvedKey = __key;
            }
        }
        return MoveEffects;
    }

    public void setMoveEffects(MoveEffects MoveEffects) {
        if (MoveEffects == null) {
            throw new DaoException("To-one property 'EffectId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.MoveEffects = MoveEffects;
            EffectId = MoveEffects.getId();
            MoveEffects__resolvedKey = EffectId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ContestTypes getContestTypes() {
        Long __key = this.ContestTypeId;
        if (ContestTypes__resolvedKey == null || !ContestTypes__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContestTypesDao targetDao = daoSession.getContestTypesDao();
            ContestTypes ContestTypesNew = targetDao.load(__key);
            synchronized (this) {
                ContestTypes = ContestTypesNew;
            	ContestTypes__resolvedKey = __key;
            }
        }
        return ContestTypes;
    }

    public void setContestTypes(ContestTypes ContestTypes) {
        synchronized (this) {
            this.ContestTypes = ContestTypes;
            ContestTypeId = ContestTypes == null ? null : ContestTypes.getId();
            ContestTypes__resolvedKey = ContestTypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ContestEffects getContestEffects() {
        Long __key = this.ContestEffectId;
        if (ContestEffects__resolvedKey == null || !ContestEffects__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContestEffectsDao targetDao = daoSession.getContestEffectsDao();
            ContestEffects ContestEffectsNew = targetDao.load(__key);
            synchronized (this) {
                ContestEffects = ContestEffectsNew;
            	ContestEffects__resolvedKey = __key;
            }
        }
        return ContestEffects;
    }

    public void setContestEffects(ContestEffects ContestEffects) {
        synchronized (this) {
            this.ContestEffects = ContestEffects;
            ContestEffectId = ContestEffects == null ? null : ContestEffects.getId();
            ContestEffects__resolvedKey = ContestEffectId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SuperContestEffects getSuperContestEffects() {
        Long __key = this.SuperContestEffectId;
        if (SuperContestEffects__resolvedKey == null || !SuperContestEffects__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SuperContestEffectsDao targetDao = daoSession.getSuperContestEffectsDao();
            SuperContestEffects SuperContestEffectsNew = targetDao.load(__key);
            synchronized (this) {
                SuperContestEffects = SuperContestEffectsNew;
            	SuperContestEffects__resolvedKey = __key;
            }
        }
        return SuperContestEffects;
    }

    public void setSuperContestEffects(SuperContestEffects SuperContestEffects) {
        synchronized (this) {
            this.SuperContestEffects = SuperContestEffects;
            SuperContestEffectId = SuperContestEffects == null ? null : SuperContestEffects.getId();
            SuperContestEffects__resolvedKey = SuperContestEffectId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
