package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "type_efficacy".
 */
public class TypeEfficacy {

    private long DamageTypeId;
    private long TargetTypeId;
    private long DamageFactor;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TypeEfficacyDao myDao;

    private Types DamageType;
    private Long DamageType__resolvedKey;

    private Types TargetType;
    private Long TargetType__resolvedKey;


    public TypeEfficacy() {
    }

    public TypeEfficacy(long DamageTypeId) {
        this.DamageTypeId = DamageTypeId;
    }

    public TypeEfficacy(long DamageTypeId, long TargetTypeId, long DamageFactor) {
        this.DamageTypeId = DamageTypeId;
        this.TargetTypeId = TargetTypeId;
        this.DamageFactor = DamageFactor;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTypeEfficacyDao() : null;
    }

    public long getDamageTypeId() {
        return DamageTypeId;
    }

    public void setDamageTypeId(long DamageTypeId) {
        this.DamageTypeId = DamageTypeId;
    }

    public long getTargetTypeId() {
        return TargetTypeId;
    }

    public void setTargetTypeId(long TargetTypeId) {
        this.TargetTypeId = TargetTypeId;
    }

    public long getDamageFactor() {
        return DamageFactor;
    }

    public void setDamageFactor(long DamageFactor) {
        this.DamageFactor = DamageFactor;
    }

    /** To-one relationship, resolved on first access. */
    public Types getDamageType() {
        long __key = this.DamageTypeId;
        if (DamageType__resolvedKey == null || !DamageType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TypesDao targetDao = daoSession.getTypesDao();
            Types DamageTypeNew = targetDao.load(__key);
            synchronized (this) {
                DamageType = DamageTypeNew;
            	DamageType__resolvedKey = __key;
            }
        }
        return DamageType;
    }

    public void setDamageType(Types DamageType) {
        if (DamageType == null) {
            throw new DaoException("To-one property 'DamageTypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.DamageType = DamageType;
            DamageTypeId = DamageType.getId();
            DamageType__resolvedKey = DamageTypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Types getTargetType() {
        long __key = this.TargetTypeId;
        if (TargetType__resolvedKey == null || !TargetType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TypesDao targetDao = daoSession.getTypesDao();
            Types TargetTypeNew = targetDao.load(__key);
            synchronized (this) {
                TargetType = TargetTypeNew;
            	TargetType__resolvedKey = __key;
            }
        }
        return TargetType;
    }

    public void setTargetType(Types TargetType) {
        if (TargetType == null) {
            throw new DaoException("To-one property 'TargetTypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.TargetType = TargetType;
            TargetTypeId = TargetType.getId();
            TargetType__resolvedKey = TargetTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
