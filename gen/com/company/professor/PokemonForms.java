package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_forms".
 */
public class PokemonForms {

    private long Id;
    /** Not-null value. */
    private String Identifier;
    private String FormIdentifier;
    private long PokemonId;
    private Long IntroducedInVersionGroupId;
    private boolean IsDefault;
    private boolean IsBattleOnly;
    private boolean IsMega;
    private long FormOrder;
    private long Order;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonFormsDao myDao;

    private Pokemon Pokemon;
    private Long Pokemon__resolvedKey;

    private VersionGroups VersionGroups;
    private Long VersionGroups__resolvedKey;


    public PokemonForms() {
    }

    public PokemonForms(long Id) {
        this.Id = Id;
    }

    public PokemonForms(long Id, String Identifier, String FormIdentifier, long PokemonId, Long IntroducedInVersionGroupId, boolean IsDefault, boolean IsBattleOnly, boolean IsMega, long FormOrder, long Order) {
        this.Id = Id;
        this.Identifier = Identifier;
        this.FormIdentifier = FormIdentifier;
        this.PokemonId = PokemonId;
        this.IntroducedInVersionGroupId = IntroducedInVersionGroupId;
        this.IsDefault = IsDefault;
        this.IsBattleOnly = IsBattleOnly;
        this.IsMega = IsMega;
        this.FormOrder = FormOrder;
        this.Order = Order;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonFormsDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    /** Not-null value. */
    public String getIdentifier() {
        return Identifier;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIdentifier(String Identifier) {
        this.Identifier = Identifier;
    }

    public String getFormIdentifier() {
        return FormIdentifier;
    }

    public void setFormIdentifier(String FormIdentifier) {
        this.FormIdentifier = FormIdentifier;
    }

    public long getPokemonId() {
        return PokemonId;
    }

    public void setPokemonId(long PokemonId) {
        this.PokemonId = PokemonId;
    }

    public Long getIntroducedInVersionGroupId() {
        return IntroducedInVersionGroupId;
    }

    public void setIntroducedInVersionGroupId(Long IntroducedInVersionGroupId) {
        this.IntroducedInVersionGroupId = IntroducedInVersionGroupId;
    }

    public boolean getIsDefault() {
        return IsDefault;
    }

    public void setIsDefault(boolean IsDefault) {
        this.IsDefault = IsDefault;
    }

    public boolean getIsBattleOnly() {
        return IsBattleOnly;
    }

    public void setIsBattleOnly(boolean IsBattleOnly) {
        this.IsBattleOnly = IsBattleOnly;
    }

    public boolean getIsMega() {
        return IsMega;
    }

    public void setIsMega(boolean IsMega) {
        this.IsMega = IsMega;
    }

    public long getFormOrder() {
        return FormOrder;
    }

    public void setFormOrder(long FormOrder) {
        this.FormOrder = FormOrder;
    }

    public long getOrder() {
        return Order;
    }

    public void setOrder(long Order) {
        this.Order = Order;
    }

    /** To-one relationship, resolved on first access. */
    public Pokemon getPokemon() {
        long __key = this.PokemonId;
        if (Pokemon__resolvedKey == null || !Pokemon__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonDao targetDao = daoSession.getPokemonDao();
            Pokemon PokemonNew = targetDao.load(__key);
            synchronized (this) {
                Pokemon = PokemonNew;
            	Pokemon__resolvedKey = __key;
            }
        }
        return Pokemon;
    }

    public void setPokemon(Pokemon Pokemon) {
        if (Pokemon == null) {
            throw new DaoException("To-one property 'PokemonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Pokemon = Pokemon;
            PokemonId = Pokemon.getId();
            Pokemon__resolvedKey = PokemonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public VersionGroups getVersionGroups() {
        Long __key = this.IntroducedInVersionGroupId;
        if (VersionGroups__resolvedKey == null || !VersionGroups__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionGroupsDao targetDao = daoSession.getVersionGroupsDao();
            VersionGroups VersionGroupsNew = targetDao.load(__key);
            synchronized (this) {
                VersionGroups = VersionGroupsNew;
            	VersionGroups__resolvedKey = __key;
            }
        }
        return VersionGroups;
    }

    public void setVersionGroups(VersionGroups VersionGroups) {
        synchronized (this) {
            this.VersionGroups = VersionGroups;
            IntroducedInVersionGroupId = VersionGroups == null ? null : VersionGroups.getId();
            VersionGroups__resolvedKey = IntroducedInVersionGroupId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
