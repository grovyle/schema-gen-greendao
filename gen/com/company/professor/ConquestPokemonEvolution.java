package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "conquest_pokemon_evolution".
 */
public class ConquestPokemonEvolution {

    private long EvolvedSpeciesId;
    private Long RequiredStatId;
    private Long MinimumStat;
    private Long MinimumLink;
    private Long KingdomId;
    private Long WarriorGenderId;
    private Long ItemId;
    private boolean RecruitingKoRequired;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConquestPokemonEvolutionDao myDao;

    private PokemonSpecies PokemonSpecies;
    private Long PokemonSpecies__resolvedKey;

    private ConquestStats ConquestStats;
    private Long ConquestStats__resolvedKey;

    private ConquestKingdoms ConquestKingdoms;
    private Long ConquestKingdoms__resolvedKey;

    private Genders Genders;
    private Long Genders__resolvedKey;

    private Items Items;
    private Long Items__resolvedKey;


    public ConquestPokemonEvolution() {
    }

    public ConquestPokemonEvolution(long EvolvedSpeciesId) {
        this.EvolvedSpeciesId = EvolvedSpeciesId;
    }

    public ConquestPokemonEvolution(long EvolvedSpeciesId, Long RequiredStatId, Long MinimumStat, Long MinimumLink, Long KingdomId, Long WarriorGenderId, Long ItemId, boolean RecruitingKoRequired) {
        this.EvolvedSpeciesId = EvolvedSpeciesId;
        this.RequiredStatId = RequiredStatId;
        this.MinimumStat = MinimumStat;
        this.MinimumLink = MinimumLink;
        this.KingdomId = KingdomId;
        this.WarriorGenderId = WarriorGenderId;
        this.ItemId = ItemId;
        this.RecruitingKoRequired = RecruitingKoRequired;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConquestPokemonEvolutionDao() : null;
    }

    public long getEvolvedSpeciesId() {
        return EvolvedSpeciesId;
    }

    public void setEvolvedSpeciesId(long EvolvedSpeciesId) {
        this.EvolvedSpeciesId = EvolvedSpeciesId;
    }

    public Long getRequiredStatId() {
        return RequiredStatId;
    }

    public void setRequiredStatId(Long RequiredStatId) {
        this.RequiredStatId = RequiredStatId;
    }

    public Long getMinimumStat() {
        return MinimumStat;
    }

    public void setMinimumStat(Long MinimumStat) {
        this.MinimumStat = MinimumStat;
    }

    public Long getMinimumLink() {
        return MinimumLink;
    }

    public void setMinimumLink(Long MinimumLink) {
        this.MinimumLink = MinimumLink;
    }

    public Long getKingdomId() {
        return KingdomId;
    }

    public void setKingdomId(Long KingdomId) {
        this.KingdomId = KingdomId;
    }

    public Long getWarriorGenderId() {
        return WarriorGenderId;
    }

    public void setWarriorGenderId(Long WarriorGenderId) {
        this.WarriorGenderId = WarriorGenderId;
    }

    public Long getItemId() {
        return ItemId;
    }

    public void setItemId(Long ItemId) {
        this.ItemId = ItemId;
    }

    public boolean getRecruitingKoRequired() {
        return RecruitingKoRequired;
    }

    public void setRecruitingKoRequired(boolean RecruitingKoRequired) {
        this.RecruitingKoRequired = RecruitingKoRequired;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonSpecies getPokemonSpecies() {
        long __key = this.EvolvedSpeciesId;
        if (PokemonSpecies__resolvedKey == null || !PokemonSpecies__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonSpeciesDao targetDao = daoSession.getPokemonSpeciesDao();
            PokemonSpecies PokemonSpeciesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonSpecies = PokemonSpeciesNew;
            	PokemonSpecies__resolvedKey = __key;
            }
        }
        return PokemonSpecies;
    }

    public void setPokemonSpecies(PokemonSpecies PokemonSpecies) {
        if (PokemonSpecies == null) {
            throw new DaoException("To-one property 'EvolvedSpeciesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonSpecies = PokemonSpecies;
            EvolvedSpeciesId = PokemonSpecies.getId();
            PokemonSpecies__resolvedKey = EvolvedSpeciesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConquestStats getConquestStats() {
        Long __key = this.RequiredStatId;
        if (ConquestStats__resolvedKey == null || !ConquestStats__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestStatsDao targetDao = daoSession.getConquestStatsDao();
            ConquestStats ConquestStatsNew = targetDao.load(__key);
            synchronized (this) {
                ConquestStats = ConquestStatsNew;
            	ConquestStats__resolvedKey = __key;
            }
        }
        return ConquestStats;
    }

    public void setConquestStats(ConquestStats ConquestStats) {
        synchronized (this) {
            this.ConquestStats = ConquestStats;
            RequiredStatId = ConquestStats == null ? null : ConquestStats.getId();
            ConquestStats__resolvedKey = RequiredStatId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConquestKingdoms getConquestKingdoms() {
        Long __key = this.KingdomId;
        if (ConquestKingdoms__resolvedKey == null || !ConquestKingdoms__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestKingdomsDao targetDao = daoSession.getConquestKingdomsDao();
            ConquestKingdoms ConquestKingdomsNew = targetDao.load(__key);
            synchronized (this) {
                ConquestKingdoms = ConquestKingdomsNew;
            	ConquestKingdoms__resolvedKey = __key;
            }
        }
        return ConquestKingdoms;
    }

    public void setConquestKingdoms(ConquestKingdoms ConquestKingdoms) {
        synchronized (this) {
            this.ConquestKingdoms = ConquestKingdoms;
            KingdomId = ConquestKingdoms == null ? null : ConquestKingdoms.getId();
            ConquestKingdoms__resolvedKey = KingdomId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Genders getGenders() {
        Long __key = this.WarriorGenderId;
        if (Genders__resolvedKey == null || !Genders__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GendersDao targetDao = daoSession.getGendersDao();
            Genders GendersNew = targetDao.load(__key);
            synchronized (this) {
                Genders = GendersNew;
            	Genders__resolvedKey = __key;
            }
        }
        return Genders;
    }

    public void setGenders(Genders Genders) {
        synchronized (this) {
            this.Genders = Genders;
            WarriorGenderId = Genders == null ? null : Genders.getId();
            Genders__resolvedKey = WarriorGenderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Items getItems() {
        Long __key = this.ItemId;
        if (Items__resolvedKey == null || !Items__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemsDao targetDao = daoSession.getItemsDao();
            Items ItemsNew = targetDao.load(__key);
            synchronized (this) {
                Items = ItemsNew;
            	Items__resolvedKey = __key;
            }
        }
        return Items;
    }

    public void setItems(Items Items) {
        synchronized (this) {
            this.Items = Items;
            ItemId = Items == null ? null : Items.getId();
            Items__resolvedKey = ItemId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
