package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.company.professor.PokemonFormGenerations;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "pokemon_form_generations".
*/
public class PokemonFormGenerationsDao extends AbstractDao<PokemonFormGenerations, Long> {

    public static final String TABLENAME = "pokemon_form_generations";

    /**
     * Properties of entity PokemonFormGenerations.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PokemonFormId = new Property(0, long.class, "PokemonFormId", true, "pokemon_form_id");
        public final static Property GenerationId = new Property(1, long.class, "GenerationId", false, "generation_id");
        public final static Property GameIndex = new Property(2, long.class, "GameIndex", false, "game_index");
    };

    private DaoSession daoSession;


    public PokemonFormGenerationsDao(DaoConfig config) {
        super(config);
    }
    
    public PokemonFormGenerationsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"pokemon_form_generations\" (" + //
                "\"pokemon_form_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: PokemonFormId
                "\"generation_id\" INTEGER NOT NULL ," + // 1: GenerationId
                "\"game_index\" INTEGER NOT NULL );"); // 2: GameIndex
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_pokemon_form_generations_pokemon_form_id_generation_id ON pokemon_form_generations" +
                " (\"pokemon_form_id\",\"generation_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"pokemon_form_generations\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PokemonFormGenerations entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPokemonFormId());
        stmt.bindLong(2, entity.getGenerationId());
        stmt.bindLong(3, entity.getGameIndex());
    }

    @Override
    protected void attachEntity(PokemonFormGenerations entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PokemonFormGenerations readEntity(Cursor cursor, int offset) {
        PokemonFormGenerations entity = new PokemonFormGenerations( //
            cursor.getLong(offset + 0), // PokemonFormId
            cursor.getLong(offset + 1), // GenerationId
            cursor.getLong(offset + 2) // GameIndex
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PokemonFormGenerations entity, int offset) {
        entity.setPokemonFormId(cursor.getLong(offset + 0));
        entity.setGenerationId(cursor.getLong(offset + 1));
        entity.setGameIndex(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PokemonFormGenerations entity, long rowId) {
        entity.setPokemonFormId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PokemonFormGenerations entity) {
        if(entity != null) {
            return entity.getPokemonFormId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPokemonFormsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGenerationsDao().getAllColumns());
            builder.append(" FROM pokemon_form_generations T");
            builder.append(" LEFT JOIN pokemon_forms T0 ON T.\"pokemon_form_id\"=T0.\"id\"");
            builder.append(" LEFT JOIN generations T1 ON T.\"generation_id\"=T1.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PokemonFormGenerations loadCurrentDeep(Cursor cursor, boolean lock) {
        PokemonFormGenerations entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PokemonForms PokemonForms = loadCurrentOther(daoSession.getPokemonFormsDao(), cursor, offset);
         if(PokemonForms != null) {
            entity.setPokemonForms(PokemonForms);
        }
        offset += daoSession.getPokemonFormsDao().getAllColumns().length;

        Generations Generations = loadCurrentOther(daoSession.getGenerationsDao(), cursor, offset);
         if(Generations != null) {
            entity.setGenerations(Generations);
        }

        return entity;    
    }

    public PokemonFormGenerations loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PokemonFormGenerations> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PokemonFormGenerations> list = new ArrayList<PokemonFormGenerations>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PokemonFormGenerations> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PokemonFormGenerations> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
