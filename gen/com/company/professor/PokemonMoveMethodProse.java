package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_move_method_prose".
 */
public class PokemonMoveMethodProse {

    private long PokemonMoveMethodId;
    private long LocalLanguageId;
    private String Name;
    private String Description;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonMoveMethodProseDao myDao;

    private PokemonMoveMethods PokemonMoveMethods;
    private Long PokemonMoveMethods__resolvedKey;

    private Languages Languages;
    private Long Languages__resolvedKey;


    public PokemonMoveMethodProse() {
    }

    public PokemonMoveMethodProse(long PokemonMoveMethodId) {
        this.PokemonMoveMethodId = PokemonMoveMethodId;
    }

    public PokemonMoveMethodProse(long PokemonMoveMethodId, long LocalLanguageId, String Name, String Description) {
        this.PokemonMoveMethodId = PokemonMoveMethodId;
        this.LocalLanguageId = LocalLanguageId;
        this.Name = Name;
        this.Description = Description;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonMoveMethodProseDao() : null;
    }

    public long getPokemonMoveMethodId() {
        return PokemonMoveMethodId;
    }

    public void setPokemonMoveMethodId(long PokemonMoveMethodId) {
        this.PokemonMoveMethodId = PokemonMoveMethodId;
    }

    public long getLocalLanguageId() {
        return LocalLanguageId;
    }

    public void setLocalLanguageId(long LocalLanguageId) {
        this.LocalLanguageId = LocalLanguageId;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public String getDescription() {
        return Description;
    }

    public void setDescription(String Description) {
        this.Description = Description;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonMoveMethods getPokemonMoveMethods() {
        long __key = this.PokemonMoveMethodId;
        if (PokemonMoveMethods__resolvedKey == null || !PokemonMoveMethods__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonMoveMethodsDao targetDao = daoSession.getPokemonMoveMethodsDao();
            PokemonMoveMethods PokemonMoveMethodsNew = targetDao.load(__key);
            synchronized (this) {
                PokemonMoveMethods = PokemonMoveMethodsNew;
            	PokemonMoveMethods__resolvedKey = __key;
            }
        }
        return PokemonMoveMethods;
    }

    public void setPokemonMoveMethods(PokemonMoveMethods PokemonMoveMethods) {
        if (PokemonMoveMethods == null) {
            throw new DaoException("To-one property 'PokemonMoveMethodId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonMoveMethods = PokemonMoveMethods;
            PokemonMoveMethodId = PokemonMoveMethods.getId();
            PokemonMoveMethods__resolvedKey = PokemonMoveMethodId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Languages getLanguages() {
        long __key = this.LocalLanguageId;
        if (Languages__resolvedKey == null || !Languages__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagesDao targetDao = daoSession.getLanguagesDao();
            Languages LanguagesNew = targetDao.load(__key);
            synchronized (this) {
                Languages = LanguagesNew;
            	Languages__resolvedKey = __key;
            }
        }
        return Languages;
    }

    public void setLanguages(Languages Languages) {
        if (Languages == null) {
            throw new DaoException("To-one property 'LocalLanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Languages = Languages;
            LocalLanguageId = Languages.getId();
            Languages__resolvedKey = LocalLanguageId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
