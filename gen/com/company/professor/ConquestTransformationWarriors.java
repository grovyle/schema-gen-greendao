package com.company.professor;

import java.util.List;
import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "conquest_transformation_warriors".
 */
public class ConquestTransformationWarriors {

    private long TransformationId;
    private long PresentWarriorId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConquestTransformationWarriorsDao myDao;

    private ConquestWarriors ConquestWarriors;
    private Long ConquestWarriors__resolvedKey;

    private List<ConquestWarriorTransformation> ConquestWarriorTransformation;

    public ConquestTransformationWarriors() {
    }

    public ConquestTransformationWarriors(long TransformationId) {
        this.TransformationId = TransformationId;
    }

    public ConquestTransformationWarriors(long TransformationId, long PresentWarriorId) {
        this.TransformationId = TransformationId;
        this.PresentWarriorId = PresentWarriorId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConquestTransformationWarriorsDao() : null;
    }

    public long getTransformationId() {
        return TransformationId;
    }

    public void setTransformationId(long TransformationId) {
        this.TransformationId = TransformationId;
    }

    public long getPresentWarriorId() {
        return PresentWarriorId;
    }

    public void setPresentWarriorId(long PresentWarriorId) {
        this.PresentWarriorId = PresentWarriorId;
    }

    /** To-one relationship, resolved on first access. */
    public ConquestWarriors getConquestWarriors() {
        long __key = this.PresentWarriorId;
        if (ConquestWarriors__resolvedKey == null || !ConquestWarriors__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestWarriorsDao targetDao = daoSession.getConquestWarriorsDao();
            ConquestWarriors ConquestWarriorsNew = targetDao.load(__key);
            synchronized (this) {
                ConquestWarriors = ConquestWarriorsNew;
            	ConquestWarriors__resolvedKey = __key;
            }
        }
        return ConquestWarriors;
    }

    public void setConquestWarriors(ConquestWarriors ConquestWarriors) {
        if (ConquestWarriors == null) {
            throw new DaoException("To-one property 'PresentWarriorId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ConquestWarriors = ConquestWarriors;
            PresentWarriorId = ConquestWarriors.getId();
            ConquestWarriors__resolvedKey = PresentWarriorId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ConquestWarriorTransformation> getConquestWarriorTransformation() {
        if (ConquestWarriorTransformation == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestWarriorTransformationDao targetDao = daoSession.getConquestWarriorTransformationDao();
            List<ConquestWarriorTransformation> ConquestWarriorTransformationNew = targetDao._queryConquestTransformationWarriors_ConquestWarriorTransformation(TransformationId);
            synchronized (this) {
                if(ConquestWarriorTransformation == null) {
                    ConquestWarriorTransformation = ConquestWarriorTransformationNew;
                }
            }
        }
        return ConquestWarriorTransformation;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetConquestWarriorTransformation() {
        ConquestWarriorTransformation = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
