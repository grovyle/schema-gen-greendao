package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_egg_groups".
 */
public class PokemonEggGroups {

    private long SpeciesId;
    private long EggGroupId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonEggGroupsDao myDao;

    private PokemonSpecies PokemonSpecies;
    private Long PokemonSpecies__resolvedKey;

    private EggGroups EggGroups;
    private Long EggGroups__resolvedKey;


    public PokemonEggGroups() {
    }

    public PokemonEggGroups(long SpeciesId) {
        this.SpeciesId = SpeciesId;
    }

    public PokemonEggGroups(long SpeciesId, long EggGroupId) {
        this.SpeciesId = SpeciesId;
        this.EggGroupId = EggGroupId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonEggGroupsDao() : null;
    }

    public long getSpeciesId() {
        return SpeciesId;
    }

    public void setSpeciesId(long SpeciesId) {
        this.SpeciesId = SpeciesId;
    }

    public long getEggGroupId() {
        return EggGroupId;
    }

    public void setEggGroupId(long EggGroupId) {
        this.EggGroupId = EggGroupId;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonSpecies getPokemonSpecies() {
        long __key = this.SpeciesId;
        if (PokemonSpecies__resolvedKey == null || !PokemonSpecies__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonSpeciesDao targetDao = daoSession.getPokemonSpeciesDao();
            PokemonSpecies PokemonSpeciesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonSpecies = PokemonSpeciesNew;
            	PokemonSpecies__resolvedKey = __key;
            }
        }
        return PokemonSpecies;
    }

    public void setPokemonSpecies(PokemonSpecies PokemonSpecies) {
        if (PokemonSpecies == null) {
            throw new DaoException("To-one property 'SpeciesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonSpecies = PokemonSpecies;
            SpeciesId = PokemonSpecies.getId();
            PokemonSpecies__resolvedKey = SpeciesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public EggGroups getEggGroups() {
        long __key = this.EggGroupId;
        if (EggGroups__resolvedKey == null || !EggGroups__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EggGroupsDao targetDao = daoSession.getEggGroupsDao();
            EggGroups EggGroupsNew = targetDao.load(__key);
            synchronized (this) {
                EggGroups = EggGroupsNew;
            	EggGroups__resolvedKey = __key;
            }
        }
        return EggGroups;
    }

    public void setEggGroups(EggGroups EggGroups) {
        if (EggGroups == null) {
            throw new DaoException("To-one property 'EggGroupId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.EggGroups = EggGroups;
            EggGroupId = EggGroups.getId();
            EggGroups__resolvedKey = EggGroupId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
