package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.company.professor.PokemonMoves;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "pokemon_moves".
*/
public class PokemonMovesDao extends AbstractDao<PokemonMoves, Long> {

    public static final String TABLENAME = "pokemon_moves";

    /**
     * Properties of entity PokemonMoves.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PokemonId = new Property(0, long.class, "PokemonId", true, "pokemon_id");
        public final static Property VersionGroupId = new Property(1, long.class, "VersionGroupId", false, "version_group_id");
        public final static Property MoveId = new Property(2, long.class, "MoveId", false, "move_id");
        public final static Property PokemonMoveMethodId = new Property(3, long.class, "PokemonMoveMethodId", false, "pokemon_move_method_id");
        public final static Property Level = new Property(4, long.class, "Level", false, "level");
        public final static Property Order = new Property(5, Long.class, "Order", false, "order");
    };

    private DaoSession daoSession;


    public PokemonMovesDao(DaoConfig config) {
        super(config);
    }
    
    public PokemonMovesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"pokemon_moves\" (" + //
                "\"pokemon_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: PokemonId
                "\"version_group_id\" INTEGER NOT NULL ," + // 1: VersionGroupId
                "\"move_id\" INTEGER NOT NULL ," + // 2: MoveId
                "\"pokemon_move_method_id\" INTEGER NOT NULL ," + // 3: PokemonMoveMethodId
                "\"level\" INTEGER NOT NULL ," + // 4: Level
                "\"order\" INTEGER);"); // 5: Order
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_pokemon_moves_pokemon_id_version_group_id_move_id_pokemon_move_method_id_level ON pokemon_moves" +
                " (\"pokemon_id\",\"version_group_id\",\"move_id\",\"pokemon_move_method_id\",\"level\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"pokemon_moves\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PokemonMoves entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPokemonId());
        stmt.bindLong(2, entity.getVersionGroupId());
        stmt.bindLong(3, entity.getMoveId());
        stmt.bindLong(4, entity.getPokemonMoveMethodId());
        stmt.bindLong(5, entity.getLevel());
 
        Long Order = entity.getOrder();
        if (Order != null) {
            stmt.bindLong(6, Order);
        }
    }

    @Override
    protected void attachEntity(PokemonMoves entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PokemonMoves readEntity(Cursor cursor, int offset) {
        PokemonMoves entity = new PokemonMoves( //
            cursor.getLong(offset + 0), // PokemonId
            cursor.getLong(offset + 1), // VersionGroupId
            cursor.getLong(offset + 2), // MoveId
            cursor.getLong(offset + 3), // PokemonMoveMethodId
            cursor.getLong(offset + 4), // Level
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // Order
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PokemonMoves entity, int offset) {
        entity.setPokemonId(cursor.getLong(offset + 0));
        entity.setVersionGroupId(cursor.getLong(offset + 1));
        entity.setMoveId(cursor.getLong(offset + 2));
        entity.setPokemonMoveMethodId(cursor.getLong(offset + 3));
        entity.setLevel(cursor.getLong(offset + 4));
        entity.setOrder(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PokemonMoves entity, long rowId) {
        entity.setPokemonId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PokemonMoves entity) {
        if(entity != null) {
            return entity.getPokemonId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPokemonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVersionGroupsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getMovesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getPokemonMoveMethodsDao().getAllColumns());
            builder.append(" FROM pokemon_moves T");
            builder.append(" LEFT JOIN pokemon T0 ON T.\"pokemon_id\"=T0.\"id\"");
            builder.append(" LEFT JOIN version_groups T1 ON T.\"version_group_id\"=T1.\"id\"");
            builder.append(" LEFT JOIN moves T2 ON T.\"move_id\"=T2.\"id\"");
            builder.append(" LEFT JOIN pokemon_move_methods T3 ON T.\"pokemon_move_method_id\"=T3.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PokemonMoves loadCurrentDeep(Cursor cursor, boolean lock) {
        PokemonMoves entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Pokemon Pokemon = loadCurrentOther(daoSession.getPokemonDao(), cursor, offset);
         if(Pokemon != null) {
            entity.setPokemon(Pokemon);
        }
        offset += daoSession.getPokemonDao().getAllColumns().length;

        VersionGroups VersionGroups = loadCurrentOther(daoSession.getVersionGroupsDao(), cursor, offset);
         if(VersionGroups != null) {
            entity.setVersionGroups(VersionGroups);
        }
        offset += daoSession.getVersionGroupsDao().getAllColumns().length;

        Moves Moves = loadCurrentOther(daoSession.getMovesDao(), cursor, offset);
         if(Moves != null) {
            entity.setMoves(Moves);
        }
        offset += daoSession.getMovesDao().getAllColumns().length;

        PokemonMoveMethods PokemonMoveMethods = loadCurrentOther(daoSession.getPokemonMoveMethodsDao(), cursor, offset);
         if(PokemonMoveMethods != null) {
            entity.setPokemonMoveMethods(PokemonMoveMethods);
        }

        return entity;    
    }

    public PokemonMoves loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PokemonMoves> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PokemonMoves> list = new ArrayList<PokemonMoves>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PokemonMoves> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PokemonMoves> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
