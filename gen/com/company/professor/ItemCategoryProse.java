package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "item_category_prose".
 */
public class ItemCategoryProse {

    private long ItemCategoryId;
    private long LocalLanguageId;
    /** Not-null value. */
    private String Name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemCategoryProseDao myDao;

    private ItemCategories ItemCategories;
    private Long ItemCategories__resolvedKey;

    private Languages Languages;
    private Long Languages__resolvedKey;


    public ItemCategoryProse() {
    }

    public ItemCategoryProse(long ItemCategoryId) {
        this.ItemCategoryId = ItemCategoryId;
    }

    public ItemCategoryProse(long ItemCategoryId, long LocalLanguageId, String Name) {
        this.ItemCategoryId = ItemCategoryId;
        this.LocalLanguageId = LocalLanguageId;
        this.Name = Name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemCategoryProseDao() : null;
    }

    public long getItemCategoryId() {
        return ItemCategoryId;
    }

    public void setItemCategoryId(long ItemCategoryId) {
        this.ItemCategoryId = ItemCategoryId;
    }

    public long getLocalLanguageId() {
        return LocalLanguageId;
    }

    public void setLocalLanguageId(long LocalLanguageId) {
        this.LocalLanguageId = LocalLanguageId;
    }

    /** Not-null value. */
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String Name) {
        this.Name = Name;
    }

    /** To-one relationship, resolved on first access. */
    public ItemCategories getItemCategories() {
        long __key = this.ItemCategoryId;
        if (ItemCategories__resolvedKey == null || !ItemCategories__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemCategoriesDao targetDao = daoSession.getItemCategoriesDao();
            ItemCategories ItemCategoriesNew = targetDao.load(__key);
            synchronized (this) {
                ItemCategories = ItemCategoriesNew;
            	ItemCategories__resolvedKey = __key;
            }
        }
        return ItemCategories;
    }

    public void setItemCategories(ItemCategories ItemCategories) {
        if (ItemCategories == null) {
            throw new DaoException("To-one property 'ItemCategoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ItemCategories = ItemCategories;
            ItemCategoryId = ItemCategories.getId();
            ItemCategories__resolvedKey = ItemCategoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Languages getLanguages() {
        long __key = this.LocalLanguageId;
        if (Languages__resolvedKey == null || !Languages__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagesDao targetDao = daoSession.getLanguagesDao();
            Languages LanguagesNew = targetDao.load(__key);
            synchronized (this) {
                Languages = LanguagesNew;
            	Languages__resolvedKey = __key;
            }
        }
        return Languages;
    }

    public void setLanguages(Languages Languages) {
        if (Languages == null) {
            throw new DaoException("To-one property 'LocalLanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Languages = Languages;
            LocalLanguageId = Languages.getId();
            Languages__resolvedKey = LocalLanguageId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
