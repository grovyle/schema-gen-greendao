package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.company.professor.ConquestWarriorTransformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "conquest_warrior_transformation".
*/
public class ConquestWarriorTransformationDao extends AbstractDao<ConquestWarriorTransformation, Long> {

    public static final String TABLENAME = "conquest_warrior_transformation";

    /**
     * Properties of entity ConquestWarriorTransformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TransformedWarriorRankId = new Property(0, long.class, "TransformedWarriorRankId", true, "transformed_warrior_rank_id");
        public final static Property IsAutomatic = new Property(1, boolean.class, "IsAutomatic", false, "is_automatic");
        public final static Property RequiredLink = new Property(2, Long.class, "RequiredLink", false, "required_link");
        public final static Property CompletedEpisodeId = new Property(3, Long.class, "CompletedEpisodeId", false, "completed_episode_id");
        public final static Property CurrentEpisodeId = new Property(4, Long.class, "CurrentEpisodeId", false, "current_episode_id");
        public final static Property DistantWarriorId = new Property(5, Long.class, "DistantWarriorId", false, "distant_warrior_id");
        public final static Property FemaleWarlordCount = new Property(6, Long.class, "FemaleWarlordCount", false, "female_warlord_count");
        public final static Property PokemonCount = new Property(7, Long.class, "PokemonCount", false, "pokemon_count");
        public final static Property CollectionTypeId = new Property(8, Long.class, "CollectionTypeId", false, "collection_type_id");
        public final static Property WarriorCount = new Property(9, Long.class, "WarriorCount", false, "warrior_count");
        public final static Property TransformationId = new Property(10, long.class, "TransformationId", true, "transformation_id");
        public final static Property TransformationId = new Property(11, long.class, "TransformationId", true, "transformation_id");
    };

    private DaoSession daoSession;

    private Query<ConquestWarriorTransformation> conquestTransformationPokemon_ConquestWarriorTransformationQuery;
    private Query<ConquestWarriorTransformation> conquestTransformationWarriors_ConquestWarriorTransformationQuery;

    public ConquestWarriorTransformationDao(DaoConfig config) {
        super(config);
    }
    
    public ConquestWarriorTransformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"conquest_warrior_transformation\" (" + //
                "\"transformed_warrior_rank_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: TransformedWarriorRankId
                "\"is_automatic\" INTEGER NOT NULL ," + // 1: IsAutomatic
                "\"required_link\" INTEGER," + // 2: RequiredLink
                "\"completed_episode_id\" INTEGER," + // 3: CompletedEpisodeId
                "\"current_episode_id\" INTEGER," + // 4: CurrentEpisodeId
                "\"distant_warrior_id\" INTEGER," + // 5: DistantWarriorId
                "\"female_warlord_count\" INTEGER," + // 6: FemaleWarlordCount
                "\"pokemon_count\" INTEGER," + // 7: PokemonCount
                "\"collection_type_id\" INTEGER," + // 8: CollectionTypeId
                "\"warrior_count\" INTEGER," + // 9: WarriorCount
                "\"transformation_id\" INTEGER PRIMARY KEY NOT NULL ," + // 10: TransformationId
                "\"transformation_id\" INTEGER PRIMARY KEY NOT NULL );"); // 11: TransformationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"conquest_warrior_transformation\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ConquestWarriorTransformation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTransformedWarriorRankId());
        stmt.bindLong(2, entity.getIsAutomatic() ? 1L: 0L);
 
        Long RequiredLink = entity.getRequiredLink();
        if (RequiredLink != null) {
            stmt.bindLong(3, RequiredLink);
        }
 
        Long CompletedEpisodeId = entity.getCompletedEpisodeId();
        if (CompletedEpisodeId != null) {
            stmt.bindLong(4, CompletedEpisodeId);
        }
 
        Long CurrentEpisodeId = entity.getCurrentEpisodeId();
        if (CurrentEpisodeId != null) {
            stmt.bindLong(5, CurrentEpisodeId);
        }
 
        Long DistantWarriorId = entity.getDistantWarriorId();
        if (DistantWarriorId != null) {
            stmt.bindLong(6, DistantWarriorId);
        }
 
        Long FemaleWarlordCount = entity.getFemaleWarlordCount();
        if (FemaleWarlordCount != null) {
            stmt.bindLong(7, FemaleWarlordCount);
        }
 
        Long PokemonCount = entity.getPokemonCount();
        if (PokemonCount != null) {
            stmt.bindLong(8, PokemonCount);
        }
 
        Long CollectionTypeId = entity.getCollectionTypeId();
        if (CollectionTypeId != null) {
            stmt.bindLong(9, CollectionTypeId);
        }
 
        Long WarriorCount = entity.getWarriorCount();
        if (WarriorCount != null) {
            stmt.bindLong(10, WarriorCount);
        }
    }

    @Override
    protected void attachEntity(ConquestWarriorTransformation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ConquestWarriorTransformation readEntity(Cursor cursor, int offset) {
        ConquestWarriorTransformation entity = new ConquestWarriorTransformation( //
            cursor.getLong(offset + 0), // TransformedWarriorRankId
            cursor.getShort(offset + 1) != 0, // IsAutomatic
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // RequiredLink
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // CompletedEpisodeId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // CurrentEpisodeId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // DistantWarriorId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // FemaleWarlordCount
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // PokemonCount
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // CollectionTypeId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // WarriorCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ConquestWarriorTransformation entity, int offset) {
        entity.setTransformedWarriorRankId(cursor.getLong(offset + 0));
        entity.setIsAutomatic(cursor.getShort(offset + 1) != 0);
        entity.setRequiredLink(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCompletedEpisodeId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCurrentEpisodeId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDistantWarriorId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFemaleWarlordCount(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setPokemonCount(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setCollectionTypeId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setWarriorCount(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ConquestWarriorTransformation entity, long rowId) {
        entity.setTransformedWarriorRankId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ConquestWarriorTransformation entity) {
        if(entity != null) {
            return entity.getTransformedWarriorRankId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ConquestWarriorTransformation" to-many relationship of ConquestTransformationPokemon. */
    public List<ConquestWarriorTransformation> _queryConquestTransformationPokemon_ConquestWarriorTransformation(long TransformationId) {
        synchronized (this) {
            if (conquestTransformationPokemon_ConquestWarriorTransformationQuery == null) {
                QueryBuilder<ConquestWarriorTransformation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TransformationId.eq(null));
                conquestTransformationPokemon_ConquestWarriorTransformationQuery = queryBuilder.build();
            }
        }
        Query<ConquestWarriorTransformation> query = conquestTransformationPokemon_ConquestWarriorTransformationQuery.forCurrentThread();
        query.setParameter(0, TransformationId);
        return query.list();
    }

    /** Internal query to resolve the "ConquestWarriorTransformation" to-many relationship of ConquestTransformationWarriors. */
    public List<ConquestWarriorTransformation> _queryConquestTransformationWarriors_ConquestWarriorTransformation(long TransformationId) {
        synchronized (this) {
            if (conquestTransformationWarriors_ConquestWarriorTransformationQuery == null) {
                QueryBuilder<ConquestWarriorTransformation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TransformationId.eq(null));
                conquestTransformationWarriors_ConquestWarriorTransformationQuery = queryBuilder.build();
            }
        }
        Query<ConquestWarriorTransformation> query = conquestTransformationWarriors_ConquestWarriorTransformationQuery.forCurrentThread();
        query.setParameter(0, TransformationId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getConquestWarriorRanksDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getConquestEpisodesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getConquestEpisodesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getConquestWarriorsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getTypesDao().getAllColumns());
            builder.append(" FROM conquest_warrior_transformation T");
            builder.append(" LEFT JOIN conquest_warrior_ranks T0 ON T.\"transformed_warrior_rank_id\"=T0.\"id\"");
            builder.append(" LEFT JOIN conquest_episodes T1 ON T.\"completed_episode_id\"=T1.\"id\"");
            builder.append(" LEFT JOIN conquest_episodes T2 ON T.\"current_episode_id\"=T2.\"id\"");
            builder.append(" LEFT JOIN conquest_warriors T3 ON T.\"distant_warrior_id\"=T3.\"id\"");
            builder.append(" LEFT JOIN types T4 ON T.\"collection_type_id\"=T4.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ConquestWarriorTransformation loadCurrentDeep(Cursor cursor, boolean lock) {
        ConquestWarriorTransformation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ConquestWarriorRanks ConquestWarriorRanks = loadCurrentOther(daoSession.getConquestWarriorRanksDao(), cursor, offset);
         if(ConquestWarriorRanks != null) {
            entity.setConquestWarriorRanks(ConquestWarriorRanks);
        }
        offset += daoSession.getConquestWarriorRanksDao().getAllColumns().length;

        ConquestEpisodes CompletedEpisode = loadCurrentOther(daoSession.getConquestEpisodesDao(), cursor, offset);
        entity.setCompletedEpisode(CompletedEpisode);
        offset += daoSession.getConquestEpisodesDao().getAllColumns().length;

        ConquestEpisodes CurrentEpisode = loadCurrentOther(daoSession.getConquestEpisodesDao(), cursor, offset);
        entity.setCurrentEpisode(CurrentEpisode);
        offset += daoSession.getConquestEpisodesDao().getAllColumns().length;

        ConquestWarriors ConquestWarriors = loadCurrentOther(daoSession.getConquestWarriorsDao(), cursor, offset);
        entity.setConquestWarriors(ConquestWarriors);
        offset += daoSession.getConquestWarriorsDao().getAllColumns().length;

        Types Types = loadCurrentOther(daoSession.getTypesDao(), cursor, offset);
        entity.setTypes(Types);

        return entity;    
    }

    public ConquestWarriorTransformation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ConquestWarriorTransformation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ConquestWarriorTransformation> list = new ArrayList<ConquestWarriorTransformation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ConquestWarriorTransformation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ConquestWarriorTransformation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
