package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pal_park".
 */
public class PalPark {

    private long SpeciesId;
    private long AreaId;
    private long BaseScore;
    private long Rate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PalParkDao myDao;

    private PokemonSpecies PokemonSpecies;
    private Long PokemonSpecies__resolvedKey;

    private PalParkAreas PalParkAreas;
    private Long PalParkAreas__resolvedKey;


    public PalPark() {
    }

    public PalPark(long SpeciesId) {
        this.SpeciesId = SpeciesId;
    }

    public PalPark(long SpeciesId, long AreaId, long BaseScore, long Rate) {
        this.SpeciesId = SpeciesId;
        this.AreaId = AreaId;
        this.BaseScore = BaseScore;
        this.Rate = Rate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPalParkDao() : null;
    }

    public long getSpeciesId() {
        return SpeciesId;
    }

    public void setSpeciesId(long SpeciesId) {
        this.SpeciesId = SpeciesId;
    }

    public long getAreaId() {
        return AreaId;
    }

    public void setAreaId(long AreaId) {
        this.AreaId = AreaId;
    }

    public long getBaseScore() {
        return BaseScore;
    }

    public void setBaseScore(long BaseScore) {
        this.BaseScore = BaseScore;
    }

    public long getRate() {
        return Rate;
    }

    public void setRate(long Rate) {
        this.Rate = Rate;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonSpecies getPokemonSpecies() {
        long __key = this.SpeciesId;
        if (PokemonSpecies__resolvedKey == null || !PokemonSpecies__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonSpeciesDao targetDao = daoSession.getPokemonSpeciesDao();
            PokemonSpecies PokemonSpeciesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonSpecies = PokemonSpeciesNew;
            	PokemonSpecies__resolvedKey = __key;
            }
        }
        return PokemonSpecies;
    }

    public void setPokemonSpecies(PokemonSpecies PokemonSpecies) {
        if (PokemonSpecies == null) {
            throw new DaoException("To-one property 'SpeciesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonSpecies = PokemonSpecies;
            SpeciesId = PokemonSpecies.getId();
            PokemonSpecies__resolvedKey = SpeciesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PalParkAreas getPalParkAreas() {
        long __key = this.AreaId;
        if (PalParkAreas__resolvedKey == null || !PalParkAreas__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PalParkAreasDao targetDao = daoSession.getPalParkAreasDao();
            PalParkAreas PalParkAreasNew = targetDao.load(__key);
            synchronized (this) {
                PalParkAreas = PalParkAreasNew;
            	PalParkAreas__resolvedKey = __key;
            }
        }
        return PalParkAreas;
    }

    public void setPalParkAreas(PalParkAreas PalParkAreas) {
        if (PalParkAreas == null) {
            throw new DaoException("To-one property 'AreaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PalParkAreas = PalParkAreas;
            AreaId = PalParkAreas.getId();
            PalParkAreas__resolvedKey = AreaId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
