package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "move_flag_map".
 */
public class MoveFlagMap {

    private long MoveId;
    private long MoveFlagId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MoveFlagMapDao myDao;

    private Moves Moves;
    private Long Moves__resolvedKey;

    private MoveFlags MoveFlags;
    private Long MoveFlags__resolvedKey;


    public MoveFlagMap() {
    }

    public MoveFlagMap(long MoveId) {
        this.MoveId = MoveId;
    }

    public MoveFlagMap(long MoveId, long MoveFlagId) {
        this.MoveId = MoveId;
        this.MoveFlagId = MoveFlagId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMoveFlagMapDao() : null;
    }

    public long getMoveId() {
        return MoveId;
    }

    public void setMoveId(long MoveId) {
        this.MoveId = MoveId;
    }

    public long getMoveFlagId() {
        return MoveFlagId;
    }

    public void setMoveFlagId(long MoveFlagId) {
        this.MoveFlagId = MoveFlagId;
    }

    /** To-one relationship, resolved on first access. */
    public Moves getMoves() {
        long __key = this.MoveId;
        if (Moves__resolvedKey == null || !Moves__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovesDao targetDao = daoSession.getMovesDao();
            Moves MovesNew = targetDao.load(__key);
            synchronized (this) {
                Moves = MovesNew;
            	Moves__resolvedKey = __key;
            }
        }
        return Moves;
    }

    public void setMoves(Moves Moves) {
        if (Moves == null) {
            throw new DaoException("To-one property 'MoveId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Moves = Moves;
            MoveId = Moves.getId();
            Moves__resolvedKey = MoveId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MoveFlags getMoveFlags() {
        long __key = this.MoveFlagId;
        if (MoveFlags__resolvedKey == null || !MoveFlags__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoveFlagsDao targetDao = daoSession.getMoveFlagsDao();
            MoveFlags MoveFlagsNew = targetDao.load(__key);
            synchronized (this) {
                MoveFlags = MoveFlagsNew;
            	MoveFlags__resolvedKey = __key;
            }
        }
        return MoveFlags;
    }

    public void setMoveFlags(MoveFlags MoveFlags) {
        if (MoveFlags == null) {
            throw new DaoException("To-one property 'MoveFlagId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.MoveFlags = MoveFlags;
            MoveFlagId = MoveFlags.getId();
            MoveFlags__resolvedKey = MoveFlagId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
