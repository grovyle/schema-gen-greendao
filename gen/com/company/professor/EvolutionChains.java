package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "evolution_chains".
 */
public class EvolutionChains {

    private long Id;
    private Long BabyTriggerItemId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EvolutionChainsDao myDao;

    private Items Items;
    private Long Items__resolvedKey;


    public EvolutionChains() {
    }

    public EvolutionChains(long Id) {
        this.Id = Id;
    }

    public EvolutionChains(long Id, Long BabyTriggerItemId) {
        this.Id = Id;
        this.BabyTriggerItemId = BabyTriggerItemId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEvolutionChainsDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    public Long getBabyTriggerItemId() {
        return BabyTriggerItemId;
    }

    public void setBabyTriggerItemId(Long BabyTriggerItemId) {
        this.BabyTriggerItemId = BabyTriggerItemId;
    }

    /** To-one relationship, resolved on first access. */
    public Items getItems() {
        Long __key = this.BabyTriggerItemId;
        if (Items__resolvedKey == null || !Items__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemsDao targetDao = daoSession.getItemsDao();
            Items ItemsNew = targetDao.load(__key);
            synchronized (this) {
                Items = ItemsNew;
            	Items__resolvedKey = __key;
            }
        }
        return Items;
    }

    public void setItems(Items Items) {
        synchronized (this) {
            this.Items = Items;
            BabyTriggerItemId = Items == null ? null : Items.getId();
            Items__resolvedKey = BabyTriggerItemId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
