package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "machines".
 */
public class Machines {

    private long MachineNumber;
    private long VersionGroupId;
    private long ItemId;
    private long MoveId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MachinesDao myDao;

    private VersionGroups VersionGroups;
    private Long VersionGroups__resolvedKey;

    private Items Items;
    private Long Items__resolvedKey;

    private Moves Moves;
    private Long Moves__resolvedKey;


    public Machines() {
    }

    public Machines(long MachineNumber) {
        this.MachineNumber = MachineNumber;
    }

    public Machines(long MachineNumber, long VersionGroupId, long ItemId, long MoveId) {
        this.MachineNumber = MachineNumber;
        this.VersionGroupId = VersionGroupId;
        this.ItemId = ItemId;
        this.MoveId = MoveId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMachinesDao() : null;
    }

    public long getMachineNumber() {
        return MachineNumber;
    }

    public void setMachineNumber(long MachineNumber) {
        this.MachineNumber = MachineNumber;
    }

    public long getVersionGroupId() {
        return VersionGroupId;
    }

    public void setVersionGroupId(long VersionGroupId) {
        this.VersionGroupId = VersionGroupId;
    }

    public long getItemId() {
        return ItemId;
    }

    public void setItemId(long ItemId) {
        this.ItemId = ItemId;
    }

    public long getMoveId() {
        return MoveId;
    }

    public void setMoveId(long MoveId) {
        this.MoveId = MoveId;
    }

    /** To-one relationship, resolved on first access. */
    public VersionGroups getVersionGroups() {
        long __key = this.VersionGroupId;
        if (VersionGroups__resolvedKey == null || !VersionGroups__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionGroupsDao targetDao = daoSession.getVersionGroupsDao();
            VersionGroups VersionGroupsNew = targetDao.load(__key);
            synchronized (this) {
                VersionGroups = VersionGroupsNew;
            	VersionGroups__resolvedKey = __key;
            }
        }
        return VersionGroups;
    }

    public void setVersionGroups(VersionGroups VersionGroups) {
        if (VersionGroups == null) {
            throw new DaoException("To-one property 'VersionGroupId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.VersionGroups = VersionGroups;
            VersionGroupId = VersionGroups.getId();
            VersionGroups__resolvedKey = VersionGroupId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Items getItems() {
        long __key = this.ItemId;
        if (Items__resolvedKey == null || !Items__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemsDao targetDao = daoSession.getItemsDao();
            Items ItemsNew = targetDao.load(__key);
            synchronized (this) {
                Items = ItemsNew;
            	Items__resolvedKey = __key;
            }
        }
        return Items;
    }

    public void setItems(Items Items) {
        if (Items == null) {
            throw new DaoException("To-one property 'ItemId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Items = Items;
            ItemId = Items.getId();
            Items__resolvedKey = ItemId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Moves getMoves() {
        long __key = this.MoveId;
        if (Moves__resolvedKey == null || !Moves__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovesDao targetDao = daoSession.getMovesDao();
            Moves MovesNew = targetDao.load(__key);
            synchronized (this) {
                Moves = MovesNew;
            	Moves__resolvedKey = __key;
            }
        }
        return Moves;
    }

    public void setMoves(Moves Moves) {
        if (Moves == null) {
            throw new DaoException("To-one property 'MoveId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Moves = Moves;
            MoveId = Moves.getId();
            Moves__resolvedKey = MoveId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
