package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "experience".
 */
public class Experience {

    private long GrowthRateId;
    private long Level;
    private long Experience;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExperienceDao myDao;

    private GrowthRates GrowthRates;
    private Long GrowthRates__resolvedKey;


    public Experience() {
    }

    public Experience(long GrowthRateId) {
        this.GrowthRateId = GrowthRateId;
    }

    public Experience(long GrowthRateId, long Level, long Experience) {
        this.GrowthRateId = GrowthRateId;
        this.Level = Level;
        this.Experience = Experience;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExperienceDao() : null;
    }

    public long getGrowthRateId() {
        return GrowthRateId;
    }

    public void setGrowthRateId(long GrowthRateId) {
        this.GrowthRateId = GrowthRateId;
    }

    public long getLevel() {
        return Level;
    }

    public void setLevel(long Level) {
        this.Level = Level;
    }

    public long getExperience() {
        return Experience;
    }

    public void setExperience(long Experience) {
        this.Experience = Experience;
    }

    /** To-one relationship, resolved on first access. */
    public GrowthRates getGrowthRates() {
        long __key = this.GrowthRateId;
        if (GrowthRates__resolvedKey == null || !GrowthRates__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GrowthRatesDao targetDao = daoSession.getGrowthRatesDao();
            GrowthRates GrowthRatesNew = targetDao.load(__key);
            synchronized (this) {
                GrowthRates = GrowthRatesNew;
            	GrowthRates__resolvedKey = __key;
            }
        }
        return GrowthRates;
    }

    public void setGrowthRates(GrowthRates GrowthRates) {
        if (GrowthRates == null) {
            throw new DaoException("To-one property 'GrowthRateId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.GrowthRates = GrowthRates;
            GrowthRateId = GrowthRates.getId();
            GrowthRates__resolvedKey = GrowthRateId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
