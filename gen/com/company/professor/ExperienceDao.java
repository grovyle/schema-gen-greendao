package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.company.professor.Experience;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "experience".
*/
public class ExperienceDao extends AbstractDao<Experience, Long> {

    public static final String TABLENAME = "experience";

    /**
     * Properties of entity Experience.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GrowthRateId = new Property(0, long.class, "GrowthRateId", true, "growth_rate_id");
        public final static Property Level = new Property(1, long.class, "Level", false, "level");
        public final static Property Experience = new Property(2, long.class, "Experience", false, "experience");
    };

    private DaoSession daoSession;


    public ExperienceDao(DaoConfig config) {
        super(config);
    }
    
    public ExperienceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"experience\" (" + //
                "\"growth_rate_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: GrowthRateId
                "\"level\" INTEGER NOT NULL ," + // 1: Level
                "\"experience\" INTEGER NOT NULL );"); // 2: Experience
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_experience_growth_rate_id_level ON experience" +
                " (\"growth_rate_id\",\"level\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"experience\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Experience entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGrowthRateId());
        stmt.bindLong(2, entity.getLevel());
        stmt.bindLong(3, entity.getExperience());
    }

    @Override
    protected void attachEntity(Experience entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Experience readEntity(Cursor cursor, int offset) {
        Experience entity = new Experience( //
            cursor.getLong(offset + 0), // GrowthRateId
            cursor.getLong(offset + 1), // Level
            cursor.getLong(offset + 2) // Experience
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Experience entity, int offset) {
        entity.setGrowthRateId(cursor.getLong(offset + 0));
        entity.setLevel(cursor.getLong(offset + 1));
        entity.setExperience(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Experience entity, long rowId) {
        entity.setGrowthRateId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Experience entity) {
        if(entity != null) {
            return entity.getGrowthRateId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGrowthRatesDao().getAllColumns());
            builder.append(" FROM experience T");
            builder.append(" LEFT JOIN growth_rates T0 ON T.\"growth_rate_id\"=T0.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Experience loadCurrentDeep(Cursor cursor, boolean lock) {
        Experience entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GrowthRates GrowthRates = loadCurrentOther(daoSession.getGrowthRatesDao(), cursor, offset);
         if(GrowthRates != null) {
            entity.setGrowthRates(GrowthRates);
        }

        return entity;    
    }

    public Experience loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Experience> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Experience> list = new ArrayList<Experience>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Experience> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Experience> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
