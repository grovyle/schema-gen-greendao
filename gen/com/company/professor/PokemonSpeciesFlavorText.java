package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_species_flavor_text".
 */
public class PokemonSpeciesFlavorText {

    private long SpeciesId;
    private long VersionId;
    private long LanguageId;
    /** Not-null value. */
    private String FlavorText;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonSpeciesFlavorTextDao myDao;

    private PokemonSpecies PokemonSpecies;
    private Long PokemonSpecies__resolvedKey;

    private Versions Versions;
    private Long Versions__resolvedKey;

    private Languages Languages;
    private Long Languages__resolvedKey;


    public PokemonSpeciesFlavorText() {
    }

    public PokemonSpeciesFlavorText(long SpeciesId) {
        this.SpeciesId = SpeciesId;
    }

    public PokemonSpeciesFlavorText(long SpeciesId, long VersionId, long LanguageId, String FlavorText) {
        this.SpeciesId = SpeciesId;
        this.VersionId = VersionId;
        this.LanguageId = LanguageId;
        this.FlavorText = FlavorText;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonSpeciesFlavorTextDao() : null;
    }

    public long getSpeciesId() {
        return SpeciesId;
    }

    public void setSpeciesId(long SpeciesId) {
        this.SpeciesId = SpeciesId;
    }

    public long getVersionId() {
        return VersionId;
    }

    public void setVersionId(long VersionId) {
        this.VersionId = VersionId;
    }

    public long getLanguageId() {
        return LanguageId;
    }

    public void setLanguageId(long LanguageId) {
        this.LanguageId = LanguageId;
    }

    /** Not-null value. */
    public String getFlavorText() {
        return FlavorText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFlavorText(String FlavorText) {
        this.FlavorText = FlavorText;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonSpecies getPokemonSpecies() {
        long __key = this.SpeciesId;
        if (PokemonSpecies__resolvedKey == null || !PokemonSpecies__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonSpeciesDao targetDao = daoSession.getPokemonSpeciesDao();
            PokemonSpecies PokemonSpeciesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonSpecies = PokemonSpeciesNew;
            	PokemonSpecies__resolvedKey = __key;
            }
        }
        return PokemonSpecies;
    }

    public void setPokemonSpecies(PokemonSpecies PokemonSpecies) {
        if (PokemonSpecies == null) {
            throw new DaoException("To-one property 'SpeciesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonSpecies = PokemonSpecies;
            SpeciesId = PokemonSpecies.getId();
            PokemonSpecies__resolvedKey = SpeciesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Versions getVersions() {
        long __key = this.VersionId;
        if (Versions__resolvedKey == null || !Versions__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionsDao targetDao = daoSession.getVersionsDao();
            Versions VersionsNew = targetDao.load(__key);
            synchronized (this) {
                Versions = VersionsNew;
            	Versions__resolvedKey = __key;
            }
        }
        return Versions;
    }

    public void setVersions(Versions Versions) {
        if (Versions == null) {
            throw new DaoException("To-one property 'VersionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Versions = Versions;
            VersionId = Versions.getId();
            Versions__resolvedKey = VersionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Languages getLanguages() {
        long __key = this.LanguageId;
        if (Languages__resolvedKey == null || !Languages__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagesDao targetDao = daoSession.getLanguagesDao();
            Languages LanguagesNew = targetDao.load(__key);
            synchronized (this) {
                Languages = LanguagesNew;
            	Languages__resolvedKey = __key;
            }
        }
        return Languages;
    }

    public void setLanguages(Languages Languages) {
        if (Languages == null) {
            throw new DaoException("To-one property 'LanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Languages = Languages;
            LanguageId = Languages.getId();
            Languages__resolvedKey = LanguageId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
