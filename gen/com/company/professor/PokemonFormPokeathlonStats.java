package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_form_pokeathlon_stats".
 */
public class PokemonFormPokeathlonStats {

    private long PokemonFormId;
    private long PokeathlonStatId;
    private long MinimumStat;
    private long BaseStat;
    private long MaximumStat;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonFormPokeathlonStatsDao myDao;

    private PokemonForms PokemonForms;
    private Long PokemonForms__resolvedKey;

    private PokeathlonStats PokeathlonStats;
    private Long PokeathlonStats__resolvedKey;


    public PokemonFormPokeathlonStats() {
    }

    public PokemonFormPokeathlonStats(long PokemonFormId) {
        this.PokemonFormId = PokemonFormId;
    }

    public PokemonFormPokeathlonStats(long PokemonFormId, long PokeathlonStatId, long MinimumStat, long BaseStat, long MaximumStat) {
        this.PokemonFormId = PokemonFormId;
        this.PokeathlonStatId = PokeathlonStatId;
        this.MinimumStat = MinimumStat;
        this.BaseStat = BaseStat;
        this.MaximumStat = MaximumStat;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonFormPokeathlonStatsDao() : null;
    }

    public long getPokemonFormId() {
        return PokemonFormId;
    }

    public void setPokemonFormId(long PokemonFormId) {
        this.PokemonFormId = PokemonFormId;
    }

    public long getPokeathlonStatId() {
        return PokeathlonStatId;
    }

    public void setPokeathlonStatId(long PokeathlonStatId) {
        this.PokeathlonStatId = PokeathlonStatId;
    }

    public long getMinimumStat() {
        return MinimumStat;
    }

    public void setMinimumStat(long MinimumStat) {
        this.MinimumStat = MinimumStat;
    }

    public long getBaseStat() {
        return BaseStat;
    }

    public void setBaseStat(long BaseStat) {
        this.BaseStat = BaseStat;
    }

    public long getMaximumStat() {
        return MaximumStat;
    }

    public void setMaximumStat(long MaximumStat) {
        this.MaximumStat = MaximumStat;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonForms getPokemonForms() {
        long __key = this.PokemonFormId;
        if (PokemonForms__resolvedKey == null || !PokemonForms__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonFormsDao targetDao = daoSession.getPokemonFormsDao();
            PokemonForms PokemonFormsNew = targetDao.load(__key);
            synchronized (this) {
                PokemonForms = PokemonFormsNew;
            	PokemonForms__resolvedKey = __key;
            }
        }
        return PokemonForms;
    }

    public void setPokemonForms(PokemonForms PokemonForms) {
        if (PokemonForms == null) {
            throw new DaoException("To-one property 'PokemonFormId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonForms = PokemonForms;
            PokemonFormId = PokemonForms.getId();
            PokemonForms__resolvedKey = PokemonFormId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PokeathlonStats getPokeathlonStats() {
        long __key = this.PokeathlonStatId;
        if (PokeathlonStats__resolvedKey == null || !PokeathlonStats__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokeathlonStatsDao targetDao = daoSession.getPokeathlonStatsDao();
            PokeathlonStats PokeathlonStatsNew = targetDao.load(__key);
            synchronized (this) {
                PokeathlonStats = PokeathlonStatsNew;
            	PokeathlonStats__resolvedKey = __key;
            }
        }
        return PokeathlonStats;
    }

    public void setPokeathlonStats(PokeathlonStats PokeathlonStats) {
        if (PokeathlonStats == null) {
            throw new DaoException("To-one property 'PokeathlonStatId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokeathlonStats = PokeathlonStats;
            PokeathlonStatId = PokeathlonStats.getId();
            PokeathlonStats__resolvedKey = PokeathlonStatId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
