package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "move_effect_prose".
 */
public class MoveEffectProse {

    private long MoveEffectId;
    private long LocalLanguageId;
    private String ShortEffect;
    private String Effect;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MoveEffectProseDao myDao;

    private MoveEffects MoveEffects;
    private Long MoveEffects__resolvedKey;

    private Languages Languages;
    private Long Languages__resolvedKey;


    public MoveEffectProse() {
    }

    public MoveEffectProse(long MoveEffectId) {
        this.MoveEffectId = MoveEffectId;
    }

    public MoveEffectProse(long MoveEffectId, long LocalLanguageId, String ShortEffect, String Effect) {
        this.MoveEffectId = MoveEffectId;
        this.LocalLanguageId = LocalLanguageId;
        this.ShortEffect = ShortEffect;
        this.Effect = Effect;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMoveEffectProseDao() : null;
    }

    public long getMoveEffectId() {
        return MoveEffectId;
    }

    public void setMoveEffectId(long MoveEffectId) {
        this.MoveEffectId = MoveEffectId;
    }

    public long getLocalLanguageId() {
        return LocalLanguageId;
    }

    public void setLocalLanguageId(long LocalLanguageId) {
        this.LocalLanguageId = LocalLanguageId;
    }

    public String getShortEffect() {
        return ShortEffect;
    }

    public void setShortEffect(String ShortEffect) {
        this.ShortEffect = ShortEffect;
    }

    public String getEffect() {
        return Effect;
    }

    public void setEffect(String Effect) {
        this.Effect = Effect;
    }

    /** To-one relationship, resolved on first access. */
    public MoveEffects getMoveEffects() {
        long __key = this.MoveEffectId;
        if (MoveEffects__resolvedKey == null || !MoveEffects__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoveEffectsDao targetDao = daoSession.getMoveEffectsDao();
            MoveEffects MoveEffectsNew = targetDao.load(__key);
            synchronized (this) {
                MoveEffects = MoveEffectsNew;
            	MoveEffects__resolvedKey = __key;
            }
        }
        return MoveEffects;
    }

    public void setMoveEffects(MoveEffects MoveEffects) {
        if (MoveEffects == null) {
            throw new DaoException("To-one property 'MoveEffectId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.MoveEffects = MoveEffects;
            MoveEffectId = MoveEffects.getId();
            MoveEffects__resolvedKey = MoveEffectId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Languages getLanguages() {
        long __key = this.LocalLanguageId;
        if (Languages__resolvedKey == null || !Languages__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagesDao targetDao = daoSession.getLanguagesDao();
            Languages LanguagesNew = targetDao.load(__key);
            synchronized (this) {
                Languages = LanguagesNew;
            	Languages__resolvedKey = __key;
            }
        }
        return Languages;
    }

    public void setLanguages(Languages Languages) {
        if (Languages == null) {
            throw new DaoException("To-one property 'LocalLanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Languages = Languages;
            LocalLanguageId = Languages.getId();
            Languages__resolvedKey = LocalLanguageId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
