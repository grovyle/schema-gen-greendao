package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_abilities".
 */
public class PokemonAbilities {

    private long PokemonId;
    private long AbilityId;
    private boolean IsHidden;
    private long Slot;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonAbilitiesDao myDao;

    private Pokemon Pokemon;
    private Long Pokemon__resolvedKey;

    private Abilities Abilities;
    private Long Abilities__resolvedKey;


    public PokemonAbilities() {
    }

    public PokemonAbilities(long PokemonId) {
        this.PokemonId = PokemonId;
    }

    public PokemonAbilities(long PokemonId, long AbilityId, boolean IsHidden, long Slot) {
        this.PokemonId = PokemonId;
        this.AbilityId = AbilityId;
        this.IsHidden = IsHidden;
        this.Slot = Slot;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonAbilitiesDao() : null;
    }

    public long getPokemonId() {
        return PokemonId;
    }

    public void setPokemonId(long PokemonId) {
        this.PokemonId = PokemonId;
    }

    public long getAbilityId() {
        return AbilityId;
    }

    public void setAbilityId(long AbilityId) {
        this.AbilityId = AbilityId;
    }

    public boolean getIsHidden() {
        return IsHidden;
    }

    public void setIsHidden(boolean IsHidden) {
        this.IsHidden = IsHidden;
    }

    public long getSlot() {
        return Slot;
    }

    public void setSlot(long Slot) {
        this.Slot = Slot;
    }

    /** To-one relationship, resolved on first access. */
    public Pokemon getPokemon() {
        long __key = this.PokemonId;
        if (Pokemon__resolvedKey == null || !Pokemon__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonDao targetDao = daoSession.getPokemonDao();
            Pokemon PokemonNew = targetDao.load(__key);
            synchronized (this) {
                Pokemon = PokemonNew;
            	Pokemon__resolvedKey = __key;
            }
        }
        return Pokemon;
    }

    public void setPokemon(Pokemon Pokemon) {
        if (Pokemon == null) {
            throw new DaoException("To-one property 'PokemonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Pokemon = Pokemon;
            PokemonId = Pokemon.getId();
            Pokemon__resolvedKey = PokemonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Abilities getAbilities() {
        long __key = this.AbilityId;
        if (Abilities__resolvedKey == null || !Abilities__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AbilitiesDao targetDao = daoSession.getAbilitiesDao();
            Abilities AbilitiesNew = targetDao.load(__key);
            synchronized (this) {
                Abilities = AbilitiesNew;
            	Abilities__resolvedKey = __key;
            }
        }
        return Abilities;
    }

    public void setAbilities(Abilities Abilities) {
        if (Abilities == null) {
            throw new DaoException("To-one property 'AbilityId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Abilities = Abilities;
            AbilityId = Abilities.getId();
            Abilities__resolvedKey = AbilityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
