package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_items".
 */
public class PokemonItems {

    private long PokemonId;
    private long VersionId;
    private long ItemId;
    private long Rarity;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonItemsDao myDao;

    private Pokemon Pokemon;
    private Long Pokemon__resolvedKey;

    private Versions Versions;
    private Long Versions__resolvedKey;

    private Items Items;
    private Long Items__resolvedKey;


    public PokemonItems() {
    }

    public PokemonItems(long PokemonId) {
        this.PokemonId = PokemonId;
    }

    public PokemonItems(long PokemonId, long VersionId, long ItemId, long Rarity) {
        this.PokemonId = PokemonId;
        this.VersionId = VersionId;
        this.ItemId = ItemId;
        this.Rarity = Rarity;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonItemsDao() : null;
    }

    public long getPokemonId() {
        return PokemonId;
    }

    public void setPokemonId(long PokemonId) {
        this.PokemonId = PokemonId;
    }

    public long getVersionId() {
        return VersionId;
    }

    public void setVersionId(long VersionId) {
        this.VersionId = VersionId;
    }

    public long getItemId() {
        return ItemId;
    }

    public void setItemId(long ItemId) {
        this.ItemId = ItemId;
    }

    public long getRarity() {
        return Rarity;
    }

    public void setRarity(long Rarity) {
        this.Rarity = Rarity;
    }

    /** To-one relationship, resolved on first access. */
    public Pokemon getPokemon() {
        long __key = this.PokemonId;
        if (Pokemon__resolvedKey == null || !Pokemon__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonDao targetDao = daoSession.getPokemonDao();
            Pokemon PokemonNew = targetDao.load(__key);
            synchronized (this) {
                Pokemon = PokemonNew;
            	Pokemon__resolvedKey = __key;
            }
        }
        return Pokemon;
    }

    public void setPokemon(Pokemon Pokemon) {
        if (Pokemon == null) {
            throw new DaoException("To-one property 'PokemonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Pokemon = Pokemon;
            PokemonId = Pokemon.getId();
            Pokemon__resolvedKey = PokemonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Versions getVersions() {
        long __key = this.VersionId;
        if (Versions__resolvedKey == null || !Versions__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionsDao targetDao = daoSession.getVersionsDao();
            Versions VersionsNew = targetDao.load(__key);
            synchronized (this) {
                Versions = VersionsNew;
            	Versions__resolvedKey = __key;
            }
        }
        return Versions;
    }

    public void setVersions(Versions Versions) {
        if (Versions == null) {
            throw new DaoException("To-one property 'VersionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Versions = Versions;
            VersionId = Versions.getId();
            Versions__resolvedKey = VersionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Items getItems() {
        long __key = this.ItemId;
        if (Items__resolvedKey == null || !Items__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemsDao targetDao = daoSession.getItemsDao();
            Items ItemsNew = targetDao.load(__key);
            synchronized (this) {
                Items = ItemsNew;
            	Items__resolvedKey = __key;
            }
        }
        return Items;
    }

    public void setItems(Items Items) {
        if (Items == null) {
            throw new DaoException("To-one property 'ItemId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Items = Items;
            ItemId = Items.getId();
            Items__resolvedKey = ItemId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
