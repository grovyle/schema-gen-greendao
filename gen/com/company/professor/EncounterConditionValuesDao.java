package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.company.professor.EncounterConditionValues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "encounter_condition_values".
*/
public class EncounterConditionValuesDao extends AbstractDao<EncounterConditionValues, Long> {

    public static final String TABLENAME = "encounter_condition_values";

    /**
     * Properties of entity EncounterConditionValues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "Id", true, "id");
        public final static Property EncounterConditionId = new Property(1, long.class, "EncounterConditionId", false, "encounter_condition_id");
        public final static Property Identifier = new Property(2, String.class, "Identifier", false, "identifier");
        public final static Property IsDefault = new Property(3, boolean.class, "IsDefault", false, "is_default");
    };

    private DaoSession daoSession;


    public EncounterConditionValuesDao(DaoConfig config) {
        super(config);
    }
    
    public EncounterConditionValuesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"encounter_condition_values\" (" + //
                "\"id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Id
                "\"encounter_condition_id\" INTEGER NOT NULL ," + // 1: EncounterConditionId
                "\"identifier\" TEXT NOT NULL ," + // 2: Identifier
                "\"is_default\" INTEGER NOT NULL );"); // 3: IsDefault
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"encounter_condition_values\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EncounterConditionValues entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getEncounterConditionId());
        stmt.bindString(3, entity.getIdentifier());
        stmt.bindLong(4, entity.getIsDefault() ? 1L: 0L);
    }

    @Override
    protected void attachEntity(EncounterConditionValues entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EncounterConditionValues readEntity(Cursor cursor, int offset) {
        EncounterConditionValues entity = new EncounterConditionValues( //
            cursor.getLong(offset + 0), // Id
            cursor.getLong(offset + 1), // EncounterConditionId
            cursor.getString(offset + 2), // Identifier
            cursor.getShort(offset + 3) != 0 // IsDefault
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EncounterConditionValues entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setEncounterConditionId(cursor.getLong(offset + 1));
        entity.setIdentifier(cursor.getString(offset + 2));
        entity.setIsDefault(cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EncounterConditionValues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EncounterConditionValues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEncounterConditionsDao().getAllColumns());
            builder.append(" FROM encounter_condition_values T");
            builder.append(" LEFT JOIN encounter_conditions T0 ON T.\"encounter_condition_id\"=T0.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected EncounterConditionValues loadCurrentDeep(Cursor cursor, boolean lock) {
        EncounterConditionValues entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        EncounterConditions EncounterConditions = loadCurrentOther(daoSession.getEncounterConditionsDao(), cursor, offset);
         if(EncounterConditions != null) {
            entity.setEncounterConditions(EncounterConditions);
        }

        return entity;    
    }

    public EncounterConditionValues loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<EncounterConditionValues> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<EncounterConditionValues> list = new ArrayList<EncounterConditionValues>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<EncounterConditionValues> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<EncounterConditionValues> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
