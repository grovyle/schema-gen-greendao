package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_species".
 */
public class PokemonSpecies {

    private long Id;
    /** Not-null value. */
    private String Identifier;
    private Long GenerationId;
    private Long EvolvesFromSpeciesId;
    private Long EvolutionChainId;
    private long ColorId;
    private long ShapeId;
    private Long HabitatId;
    private long GenderRate;
    private long CaptureRate;
    private long BaseHappiness;
    private boolean IsBaby;
    private long HatchCounter;
    private boolean HasGenderDifferences;
    private long GrowthRateId;
    private boolean FormsSwitchable;
    private long Order;
    private Long ConquestOrder;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonSpeciesDao myDao;

    private Generations Generations;
    private Long Generations__resolvedKey;

    private PokemonSpecies PokemonSpecies;
    private Long PokemonSpecies__resolvedKey;

    private EvolutionChains EvolutionChains;
    private Long EvolutionChains__resolvedKey;

    private PokemonColors PokemonColors;
    private Long PokemonColors__resolvedKey;

    private PokemonShapes PokemonShapes;
    private Long PokemonShapes__resolvedKey;

    private PokemonHabitats PokemonHabitats;
    private Long PokemonHabitats__resolvedKey;

    private GrowthRates GrowthRates;
    private Long GrowthRates__resolvedKey;


    public PokemonSpecies() {
    }

    public PokemonSpecies(long Id) {
        this.Id = Id;
    }

    public PokemonSpecies(long Id, String Identifier, Long GenerationId, Long EvolvesFromSpeciesId, Long EvolutionChainId, long ColorId, long ShapeId, Long HabitatId, long GenderRate, long CaptureRate, long BaseHappiness, boolean IsBaby, long HatchCounter, boolean HasGenderDifferences, long GrowthRateId, boolean FormsSwitchable, long Order, Long ConquestOrder) {
        this.Id = Id;
        this.Identifier = Identifier;
        this.GenerationId = GenerationId;
        this.EvolvesFromSpeciesId = EvolvesFromSpeciesId;
        this.EvolutionChainId = EvolutionChainId;
        this.ColorId = ColorId;
        this.ShapeId = ShapeId;
        this.HabitatId = HabitatId;
        this.GenderRate = GenderRate;
        this.CaptureRate = CaptureRate;
        this.BaseHappiness = BaseHappiness;
        this.IsBaby = IsBaby;
        this.HatchCounter = HatchCounter;
        this.HasGenderDifferences = HasGenderDifferences;
        this.GrowthRateId = GrowthRateId;
        this.FormsSwitchable = FormsSwitchable;
        this.Order = Order;
        this.ConquestOrder = ConquestOrder;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonSpeciesDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    /** Not-null value. */
    public String getIdentifier() {
        return Identifier;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIdentifier(String Identifier) {
        this.Identifier = Identifier;
    }

    public Long getGenerationId() {
        return GenerationId;
    }

    public void setGenerationId(Long GenerationId) {
        this.GenerationId = GenerationId;
    }

    public Long getEvolvesFromSpeciesId() {
        return EvolvesFromSpeciesId;
    }

    public void setEvolvesFromSpeciesId(Long EvolvesFromSpeciesId) {
        this.EvolvesFromSpeciesId = EvolvesFromSpeciesId;
    }

    public Long getEvolutionChainId() {
        return EvolutionChainId;
    }

    public void setEvolutionChainId(Long EvolutionChainId) {
        this.EvolutionChainId = EvolutionChainId;
    }

    public long getColorId() {
        return ColorId;
    }

    public void setColorId(long ColorId) {
        this.ColorId = ColorId;
    }

    public long getShapeId() {
        return ShapeId;
    }

    public void setShapeId(long ShapeId) {
        this.ShapeId = ShapeId;
    }

    public Long getHabitatId() {
        return HabitatId;
    }

    public void setHabitatId(Long HabitatId) {
        this.HabitatId = HabitatId;
    }

    public long getGenderRate() {
        return GenderRate;
    }

    public void setGenderRate(long GenderRate) {
        this.GenderRate = GenderRate;
    }

    public long getCaptureRate() {
        return CaptureRate;
    }

    public void setCaptureRate(long CaptureRate) {
        this.CaptureRate = CaptureRate;
    }

    public long getBaseHappiness() {
        return BaseHappiness;
    }

    public void setBaseHappiness(long BaseHappiness) {
        this.BaseHappiness = BaseHappiness;
    }

    public boolean getIsBaby() {
        return IsBaby;
    }

    public void setIsBaby(boolean IsBaby) {
        this.IsBaby = IsBaby;
    }

    public long getHatchCounter() {
        return HatchCounter;
    }

    public void setHatchCounter(long HatchCounter) {
        this.HatchCounter = HatchCounter;
    }

    public boolean getHasGenderDifferences() {
        return HasGenderDifferences;
    }

    public void setHasGenderDifferences(boolean HasGenderDifferences) {
        this.HasGenderDifferences = HasGenderDifferences;
    }

    public long getGrowthRateId() {
        return GrowthRateId;
    }

    public void setGrowthRateId(long GrowthRateId) {
        this.GrowthRateId = GrowthRateId;
    }

    public boolean getFormsSwitchable() {
        return FormsSwitchable;
    }

    public void setFormsSwitchable(boolean FormsSwitchable) {
        this.FormsSwitchable = FormsSwitchable;
    }

    public long getOrder() {
        return Order;
    }

    public void setOrder(long Order) {
        this.Order = Order;
    }

    public Long getConquestOrder() {
        return ConquestOrder;
    }

    public void setConquestOrder(Long ConquestOrder) {
        this.ConquestOrder = ConquestOrder;
    }

    /** To-one relationship, resolved on first access. */
    public Generations getGenerations() {
        Long __key = this.GenerationId;
        if (Generations__resolvedKey == null || !Generations__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GenerationsDao targetDao = daoSession.getGenerationsDao();
            Generations GenerationsNew = targetDao.load(__key);
            synchronized (this) {
                Generations = GenerationsNew;
            	Generations__resolvedKey = __key;
            }
        }
        return Generations;
    }

    public void setGenerations(Generations Generations) {
        synchronized (this) {
            this.Generations = Generations;
            GenerationId = Generations == null ? null : Generations.getId();
            Generations__resolvedKey = GenerationId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PokemonSpecies getPokemonSpecies() {
        Long __key = this.EvolvesFromSpeciesId;
        if (PokemonSpecies__resolvedKey == null || !PokemonSpecies__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonSpeciesDao targetDao = daoSession.getPokemonSpeciesDao();
            PokemonSpecies PokemonSpeciesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonSpecies = PokemonSpeciesNew;
            	PokemonSpecies__resolvedKey = __key;
            }
        }
        return PokemonSpecies;
    }

    public void setPokemonSpecies(PokemonSpecies PokemonSpecies) {
        synchronized (this) {
            this.PokemonSpecies = PokemonSpecies;
            EvolvesFromSpeciesId = PokemonSpecies == null ? null : PokemonSpecies.getId();
            PokemonSpecies__resolvedKey = EvolvesFromSpeciesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public EvolutionChains getEvolutionChains() {
        Long __key = this.EvolutionChainId;
        if (EvolutionChains__resolvedKey == null || !EvolutionChains__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EvolutionChainsDao targetDao = daoSession.getEvolutionChainsDao();
            EvolutionChains EvolutionChainsNew = targetDao.load(__key);
            synchronized (this) {
                EvolutionChains = EvolutionChainsNew;
            	EvolutionChains__resolvedKey = __key;
            }
        }
        return EvolutionChains;
    }

    public void setEvolutionChains(EvolutionChains EvolutionChains) {
        synchronized (this) {
            this.EvolutionChains = EvolutionChains;
            EvolutionChainId = EvolutionChains == null ? null : EvolutionChains.getId();
            EvolutionChains__resolvedKey = EvolutionChainId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PokemonColors getPokemonColors() {
        long __key = this.ColorId;
        if (PokemonColors__resolvedKey == null || !PokemonColors__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonColorsDao targetDao = daoSession.getPokemonColorsDao();
            PokemonColors PokemonColorsNew = targetDao.load(__key);
            synchronized (this) {
                PokemonColors = PokemonColorsNew;
            	PokemonColors__resolvedKey = __key;
            }
        }
        return PokemonColors;
    }

    public void setPokemonColors(PokemonColors PokemonColors) {
        if (PokemonColors == null) {
            throw new DaoException("To-one property 'ColorId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonColors = PokemonColors;
            ColorId = PokemonColors.getId();
            PokemonColors__resolvedKey = ColorId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PokemonShapes getPokemonShapes() {
        long __key = this.ShapeId;
        if (PokemonShapes__resolvedKey == null || !PokemonShapes__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonShapesDao targetDao = daoSession.getPokemonShapesDao();
            PokemonShapes PokemonShapesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonShapes = PokemonShapesNew;
            	PokemonShapes__resolvedKey = __key;
            }
        }
        return PokemonShapes;
    }

    public void setPokemonShapes(PokemonShapes PokemonShapes) {
        if (PokemonShapes == null) {
            throw new DaoException("To-one property 'ShapeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonShapes = PokemonShapes;
            ShapeId = PokemonShapes.getId();
            PokemonShapes__resolvedKey = ShapeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PokemonHabitats getPokemonHabitats() {
        Long __key = this.HabitatId;
        if (PokemonHabitats__resolvedKey == null || !PokemonHabitats__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonHabitatsDao targetDao = daoSession.getPokemonHabitatsDao();
            PokemonHabitats PokemonHabitatsNew = targetDao.load(__key);
            synchronized (this) {
                PokemonHabitats = PokemonHabitatsNew;
            	PokemonHabitats__resolvedKey = __key;
            }
        }
        return PokemonHabitats;
    }

    public void setPokemonHabitats(PokemonHabitats PokemonHabitats) {
        synchronized (this) {
            this.PokemonHabitats = PokemonHabitats;
            HabitatId = PokemonHabitats == null ? null : PokemonHabitats.getId();
            PokemonHabitats__resolvedKey = HabitatId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public GrowthRates getGrowthRates() {
        long __key = this.GrowthRateId;
        if (GrowthRates__resolvedKey == null || !GrowthRates__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GrowthRatesDao targetDao = daoSession.getGrowthRatesDao();
            GrowthRates GrowthRatesNew = targetDao.load(__key);
            synchronized (this) {
                GrowthRates = GrowthRatesNew;
            	GrowthRates__resolvedKey = __key;
            }
        }
        return GrowthRates;
    }

    public void setGrowthRates(GrowthRates GrowthRates) {
        if (GrowthRates == null) {
            throw new DaoException("To-one property 'GrowthRateId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.GrowthRates = GrowthRates;
            GrowthRateId = GrowthRates.getId();
            GrowthRates__resolvedKey = GrowthRateId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
