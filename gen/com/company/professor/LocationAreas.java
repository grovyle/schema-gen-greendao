package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "location_areas".
 */
public class LocationAreas {

    private long Id;
    private long LocationId;
    private long GameIndex;
    private String Identifier;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LocationAreasDao myDao;

    private Locations Locations;
    private Long Locations__resolvedKey;


    public LocationAreas() {
    }

    public LocationAreas(long Id) {
        this.Id = Id;
    }

    public LocationAreas(long Id, long LocationId, long GameIndex, String Identifier) {
        this.Id = Id;
        this.LocationId = LocationId;
        this.GameIndex = GameIndex;
        this.Identifier = Identifier;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocationAreasDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    public long getLocationId() {
        return LocationId;
    }

    public void setLocationId(long LocationId) {
        this.LocationId = LocationId;
    }

    public long getGameIndex() {
        return GameIndex;
    }

    public void setGameIndex(long GameIndex) {
        this.GameIndex = GameIndex;
    }

    public String getIdentifier() {
        return Identifier;
    }

    public void setIdentifier(String Identifier) {
        this.Identifier = Identifier;
    }

    /** To-one relationship, resolved on first access. */
    public Locations getLocations() {
        long __key = this.LocationId;
        if (Locations__resolvedKey == null || !Locations__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationsDao targetDao = daoSession.getLocationsDao();
            Locations LocationsNew = targetDao.load(__key);
            synchronized (this) {
                Locations = LocationsNew;
            	Locations__resolvedKey = __key;
            }
        }
        return Locations;
    }

    public void setLocations(Locations Locations) {
        if (Locations == null) {
            throw new DaoException("To-one property 'LocationId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Locations = Locations;
            LocationId = Locations.getId();
            Locations__resolvedKey = LocationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
