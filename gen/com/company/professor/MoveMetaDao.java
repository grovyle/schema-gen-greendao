package com.company.professor;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.company.professor.MoveMeta;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "move_meta".
*/
public class MoveMetaDao extends AbstractDao<MoveMeta, Long> {

    public static final String TABLENAME = "move_meta";

    /**
     * Properties of entity MoveMeta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MoveId = new Property(0, long.class, "MoveId", true, "move_id");
        public final static Property MetaCategoryId = new Property(1, long.class, "MetaCategoryId", false, "meta_category_id");
        public final static Property MetaAilmentId = new Property(2, long.class, "MetaAilmentId", false, "meta_ailment_id");
        public final static Property MinHits = new Property(3, Long.class, "MinHits", false, "min_hits");
        public final static Property MaxHits = new Property(4, Long.class, "MaxHits", false, "max_hits");
        public final static Property MinTurns = new Property(5, Long.class, "MinTurns", false, "min_turns");
        public final static Property MaxTurns = new Property(6, Long.class, "MaxTurns", false, "max_turns");
        public final static Property Drain = new Property(7, long.class, "Drain", false, "drain");
        public final static Property Healing = new Property(8, long.class, "Healing", false, "healing");
        public final static Property CritRate = new Property(9, long.class, "CritRate", false, "crit_rate");
        public final static Property AilmentChance = new Property(10, long.class, "AilmentChance", false, "ailment_chance");
        public final static Property FlinchChance = new Property(11, long.class, "FlinchChance", false, "flinch_chance");
        public final static Property StatChance = new Property(12, long.class, "StatChance", false, "stat_chance");
    };

    private DaoSession daoSession;


    public MoveMetaDao(DaoConfig config) {
        super(config);
    }
    
    public MoveMetaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"move_meta\" (" + //
                "\"move_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: MoveId
                "\"meta_category_id\" INTEGER NOT NULL ," + // 1: MetaCategoryId
                "\"meta_ailment_id\" INTEGER NOT NULL ," + // 2: MetaAilmentId
                "\"min_hits\" INTEGER," + // 3: MinHits
                "\"max_hits\" INTEGER," + // 4: MaxHits
                "\"min_turns\" INTEGER," + // 5: MinTurns
                "\"max_turns\" INTEGER," + // 6: MaxTurns
                "\"drain\" INTEGER NOT NULL ," + // 7: Drain
                "\"healing\" INTEGER NOT NULL ," + // 8: Healing
                "\"crit_rate\" INTEGER NOT NULL ," + // 9: CritRate
                "\"ailment_chance\" INTEGER NOT NULL ," + // 10: AilmentChance
                "\"flinch_chance\" INTEGER NOT NULL ," + // 11: FlinchChance
                "\"stat_chance\" INTEGER NOT NULL );"); // 12: StatChance
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"move_meta\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MoveMeta entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMoveId());
        stmt.bindLong(2, entity.getMetaCategoryId());
        stmt.bindLong(3, entity.getMetaAilmentId());
 
        Long MinHits = entity.getMinHits();
        if (MinHits != null) {
            stmt.bindLong(4, MinHits);
        }
 
        Long MaxHits = entity.getMaxHits();
        if (MaxHits != null) {
            stmt.bindLong(5, MaxHits);
        }
 
        Long MinTurns = entity.getMinTurns();
        if (MinTurns != null) {
            stmt.bindLong(6, MinTurns);
        }
 
        Long MaxTurns = entity.getMaxTurns();
        if (MaxTurns != null) {
            stmt.bindLong(7, MaxTurns);
        }
        stmt.bindLong(8, entity.getDrain());
        stmt.bindLong(9, entity.getHealing());
        stmt.bindLong(10, entity.getCritRate());
        stmt.bindLong(11, entity.getAilmentChance());
        stmt.bindLong(12, entity.getFlinchChance());
        stmt.bindLong(13, entity.getStatChance());
    }

    @Override
    protected void attachEntity(MoveMeta entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MoveMeta readEntity(Cursor cursor, int offset) {
        MoveMeta entity = new MoveMeta( //
            cursor.getLong(offset + 0), // MoveId
            cursor.getLong(offset + 1), // MetaCategoryId
            cursor.getLong(offset + 2), // MetaAilmentId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // MinHits
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // MaxHits
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // MinTurns
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // MaxTurns
            cursor.getLong(offset + 7), // Drain
            cursor.getLong(offset + 8), // Healing
            cursor.getLong(offset + 9), // CritRate
            cursor.getLong(offset + 10), // AilmentChance
            cursor.getLong(offset + 11), // FlinchChance
            cursor.getLong(offset + 12) // StatChance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MoveMeta entity, int offset) {
        entity.setMoveId(cursor.getLong(offset + 0));
        entity.setMetaCategoryId(cursor.getLong(offset + 1));
        entity.setMetaAilmentId(cursor.getLong(offset + 2));
        entity.setMinHits(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMaxHits(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setMinTurns(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMaxTurns(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDrain(cursor.getLong(offset + 7));
        entity.setHealing(cursor.getLong(offset + 8));
        entity.setCritRate(cursor.getLong(offset + 9));
        entity.setAilmentChance(cursor.getLong(offset + 10));
        entity.setFlinchChance(cursor.getLong(offset + 11));
        entity.setStatChance(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MoveMeta entity, long rowId) {
        entity.setMoveId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MoveMeta entity) {
        if(entity != null) {
            return entity.getMoveId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMovesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getMoveMetaCategoriesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getMoveMetaAilmentsDao().getAllColumns());
            builder.append(" FROM move_meta T");
            builder.append(" LEFT JOIN moves T0 ON T.\"move_id\"=T0.\"id\"");
            builder.append(" LEFT JOIN move_meta_categories T1 ON T.\"meta_category_id\"=T1.\"id\"");
            builder.append(" LEFT JOIN move_meta_ailments T2 ON T.\"meta_ailment_id\"=T2.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MoveMeta loadCurrentDeep(Cursor cursor, boolean lock) {
        MoveMeta entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Moves Moves = loadCurrentOther(daoSession.getMovesDao(), cursor, offset);
         if(Moves != null) {
            entity.setMoves(Moves);
        }
        offset += daoSession.getMovesDao().getAllColumns().length;

        MoveMetaCategories MoveMetaCategories = loadCurrentOther(daoSession.getMoveMetaCategoriesDao(), cursor, offset);
         if(MoveMetaCategories != null) {
            entity.setMoveMetaCategories(MoveMetaCategories);
        }
        offset += daoSession.getMoveMetaCategoriesDao().getAllColumns().length;

        MoveMetaAilments MoveMetaAilments = loadCurrentOther(daoSession.getMoveMetaAilmentsDao(), cursor, offset);
         if(MoveMetaAilments != null) {
            entity.setMoveMetaAilments(MoveMetaAilments);
        }

        return entity;    
    }

    public MoveMeta loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MoveMeta> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MoveMeta> list = new ArrayList<MoveMeta>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MoveMeta> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MoveMeta> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
