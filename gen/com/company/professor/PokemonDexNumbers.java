package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_dex_numbers".
 */
public class PokemonDexNumbers {

    private long SpeciesId;
    private long PokedexId;
    private long PokedexNumber;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonDexNumbersDao myDao;

    private PokemonSpecies PokemonSpecies;
    private Long PokemonSpecies__resolvedKey;

    private Pokedexes Pokedexes;
    private Long Pokedexes__resolvedKey;


    public PokemonDexNumbers() {
    }

    public PokemonDexNumbers(long SpeciesId) {
        this.SpeciesId = SpeciesId;
    }

    public PokemonDexNumbers(long SpeciesId, long PokedexId, long PokedexNumber) {
        this.SpeciesId = SpeciesId;
        this.PokedexId = PokedexId;
        this.PokedexNumber = PokedexNumber;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonDexNumbersDao() : null;
    }

    public long getSpeciesId() {
        return SpeciesId;
    }

    public void setSpeciesId(long SpeciesId) {
        this.SpeciesId = SpeciesId;
    }

    public long getPokedexId() {
        return PokedexId;
    }

    public void setPokedexId(long PokedexId) {
        this.PokedexId = PokedexId;
    }

    public long getPokedexNumber() {
        return PokedexNumber;
    }

    public void setPokedexNumber(long PokedexNumber) {
        this.PokedexNumber = PokedexNumber;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonSpecies getPokemonSpecies() {
        long __key = this.SpeciesId;
        if (PokemonSpecies__resolvedKey == null || !PokemonSpecies__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonSpeciesDao targetDao = daoSession.getPokemonSpeciesDao();
            PokemonSpecies PokemonSpeciesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonSpecies = PokemonSpeciesNew;
            	PokemonSpecies__resolvedKey = __key;
            }
        }
        return PokemonSpecies;
    }

    public void setPokemonSpecies(PokemonSpecies PokemonSpecies) {
        if (PokemonSpecies == null) {
            throw new DaoException("To-one property 'SpeciesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonSpecies = PokemonSpecies;
            SpeciesId = PokemonSpecies.getId();
            PokemonSpecies__resolvedKey = SpeciesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Pokedexes getPokedexes() {
        long __key = this.PokedexId;
        if (Pokedexes__resolvedKey == null || !Pokedexes__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokedexesDao targetDao = daoSession.getPokedexesDao();
            Pokedexes PokedexesNew = targetDao.load(__key);
            synchronized (this) {
                Pokedexes = PokedexesNew;
            	Pokedexes__resolvedKey = __key;
            }
        }
        return Pokedexes;
    }

    public void setPokedexes(Pokedexes Pokedexes) {
        if (Pokedexes == null) {
            throw new DaoException("To-one property 'PokedexId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Pokedexes = Pokedexes;
            PokedexId = Pokedexes.getId();
            Pokedexes__resolvedKey = PokedexId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
