package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_form_names".
 */
public class PokemonFormNames {

    private long PokemonFormId;
    private long LocalLanguageId;
    private String FormName;
    private String PokemonName;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonFormNamesDao myDao;

    private PokemonForms PokemonForms;
    private Long PokemonForms__resolvedKey;

    private Languages Languages;
    private Long Languages__resolvedKey;


    public PokemonFormNames() {
    }

    public PokemonFormNames(long PokemonFormId) {
        this.PokemonFormId = PokemonFormId;
    }

    public PokemonFormNames(long PokemonFormId, long LocalLanguageId, String FormName, String PokemonName) {
        this.PokemonFormId = PokemonFormId;
        this.LocalLanguageId = LocalLanguageId;
        this.FormName = FormName;
        this.PokemonName = PokemonName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonFormNamesDao() : null;
    }

    public long getPokemonFormId() {
        return PokemonFormId;
    }

    public void setPokemonFormId(long PokemonFormId) {
        this.PokemonFormId = PokemonFormId;
    }

    public long getLocalLanguageId() {
        return LocalLanguageId;
    }

    public void setLocalLanguageId(long LocalLanguageId) {
        this.LocalLanguageId = LocalLanguageId;
    }

    public String getFormName() {
        return FormName;
    }

    public void setFormName(String FormName) {
        this.FormName = FormName;
    }

    public String getPokemonName() {
        return PokemonName;
    }

    public void setPokemonName(String PokemonName) {
        this.PokemonName = PokemonName;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonForms getPokemonForms() {
        long __key = this.PokemonFormId;
        if (PokemonForms__resolvedKey == null || !PokemonForms__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonFormsDao targetDao = daoSession.getPokemonFormsDao();
            PokemonForms PokemonFormsNew = targetDao.load(__key);
            synchronized (this) {
                PokemonForms = PokemonFormsNew;
            	PokemonForms__resolvedKey = __key;
            }
        }
        return PokemonForms;
    }

    public void setPokemonForms(PokemonForms PokemonForms) {
        if (PokemonForms == null) {
            throw new DaoException("To-one property 'PokemonFormId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonForms = PokemonForms;
            PokemonFormId = PokemonForms.getId();
            PokemonForms__resolvedKey = PokemonFormId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Languages getLanguages() {
        long __key = this.LocalLanguageId;
        if (Languages__resolvedKey == null || !Languages__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagesDao targetDao = daoSession.getLanguagesDao();
            Languages LanguagesNew = targetDao.load(__key);
            synchronized (this) {
                Languages = LanguagesNew;
            	Languages__resolvedKey = __key;
            }
        }
        return Languages;
    }

    public void setLanguages(Languages Languages) {
        if (Languages == null) {
            throw new DaoException("To-one property 'LocalLanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Languages = Languages;
            LocalLanguageId = Languages.getId();
            Languages__resolvedKey = LocalLanguageId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
