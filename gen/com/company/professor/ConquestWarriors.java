package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "conquest_warriors".
 */
public class ConquestWarriors {

    private long Id;
    /** Not-null value. */
    private String Identifier;
    private long GenderId;
    private Long ArchetypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConquestWarriorsDao myDao;

    private Genders Genders;
    private Long Genders__resolvedKey;

    private ConquestWarriorArchetypes ConquestWarriorArchetypes;
    private Long ConquestWarriorArchetypes__resolvedKey;


    public ConquestWarriors() {
    }

    public ConquestWarriors(long Id) {
        this.Id = Id;
    }

    public ConquestWarriors(long Id, String Identifier, long GenderId, Long ArchetypeId) {
        this.Id = Id;
        this.Identifier = Identifier;
        this.GenderId = GenderId;
        this.ArchetypeId = ArchetypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConquestWarriorsDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    /** Not-null value. */
    public String getIdentifier() {
        return Identifier;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIdentifier(String Identifier) {
        this.Identifier = Identifier;
    }

    public long getGenderId() {
        return GenderId;
    }

    public void setGenderId(long GenderId) {
        this.GenderId = GenderId;
    }

    public Long getArchetypeId() {
        return ArchetypeId;
    }

    public void setArchetypeId(Long ArchetypeId) {
        this.ArchetypeId = ArchetypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Genders getGenders() {
        long __key = this.GenderId;
        if (Genders__resolvedKey == null || !Genders__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GendersDao targetDao = daoSession.getGendersDao();
            Genders GendersNew = targetDao.load(__key);
            synchronized (this) {
                Genders = GendersNew;
            	Genders__resolvedKey = __key;
            }
        }
        return Genders;
    }

    public void setGenders(Genders Genders) {
        if (Genders == null) {
            throw new DaoException("To-one property 'GenderId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Genders = Genders;
            GenderId = Genders.getId();
            Genders__resolvedKey = GenderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConquestWarriorArchetypes getConquestWarriorArchetypes() {
        Long __key = this.ArchetypeId;
        if (ConquestWarriorArchetypes__resolvedKey == null || !ConquestWarriorArchetypes__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestWarriorArchetypesDao targetDao = daoSession.getConquestWarriorArchetypesDao();
            ConquestWarriorArchetypes ConquestWarriorArchetypesNew = targetDao.load(__key);
            synchronized (this) {
                ConquestWarriorArchetypes = ConquestWarriorArchetypesNew;
            	ConquestWarriorArchetypes__resolvedKey = __key;
            }
        }
        return ConquestWarriorArchetypes;
    }

    public void setConquestWarriorArchetypes(ConquestWarriorArchetypes ConquestWarriorArchetypes) {
        synchronized (this) {
            this.ConquestWarriorArchetypes = ConquestWarriorArchetypes;
            ArchetypeId = ConquestWarriorArchetypes == null ? null : ConquestWarriorArchetypes.getId();
            ConquestWarriorArchetypes__resolvedKey = ArchetypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
