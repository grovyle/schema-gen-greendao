package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "encounter_slots".
 */
public class EncounterSlots {

    private long Id;
    private long VersionGroupId;
    private long EncounterMethodId;
    private Long Slot;
    private Long Rarity;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EncounterSlotsDao myDao;

    private VersionGroups VersionGroups;
    private Long VersionGroups__resolvedKey;

    private EncounterMethods EncounterMethods;
    private Long EncounterMethods__resolvedKey;


    public EncounterSlots() {
    }

    public EncounterSlots(long Id) {
        this.Id = Id;
    }

    public EncounterSlots(long Id, long VersionGroupId, long EncounterMethodId, Long Slot, Long Rarity) {
        this.Id = Id;
        this.VersionGroupId = VersionGroupId;
        this.EncounterMethodId = EncounterMethodId;
        this.Slot = Slot;
        this.Rarity = Rarity;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEncounterSlotsDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    public long getVersionGroupId() {
        return VersionGroupId;
    }

    public void setVersionGroupId(long VersionGroupId) {
        this.VersionGroupId = VersionGroupId;
    }

    public long getEncounterMethodId() {
        return EncounterMethodId;
    }

    public void setEncounterMethodId(long EncounterMethodId) {
        this.EncounterMethodId = EncounterMethodId;
    }

    public Long getSlot() {
        return Slot;
    }

    public void setSlot(Long Slot) {
        this.Slot = Slot;
    }

    public Long getRarity() {
        return Rarity;
    }

    public void setRarity(Long Rarity) {
        this.Rarity = Rarity;
    }

    /** To-one relationship, resolved on first access. */
    public VersionGroups getVersionGroups() {
        long __key = this.VersionGroupId;
        if (VersionGroups__resolvedKey == null || !VersionGroups__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionGroupsDao targetDao = daoSession.getVersionGroupsDao();
            VersionGroups VersionGroupsNew = targetDao.load(__key);
            synchronized (this) {
                VersionGroups = VersionGroupsNew;
            	VersionGroups__resolvedKey = __key;
            }
        }
        return VersionGroups;
    }

    public void setVersionGroups(VersionGroups VersionGroups) {
        if (VersionGroups == null) {
            throw new DaoException("To-one property 'VersionGroupId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.VersionGroups = VersionGroups;
            VersionGroupId = VersionGroups.getId();
            VersionGroups__resolvedKey = VersionGroupId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public EncounterMethods getEncounterMethods() {
        long __key = this.EncounterMethodId;
        if (EncounterMethods__resolvedKey == null || !EncounterMethods__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EncounterMethodsDao targetDao = daoSession.getEncounterMethodsDao();
            EncounterMethods EncounterMethodsNew = targetDao.load(__key);
            synchronized (this) {
                EncounterMethods = EncounterMethodsNew;
            	EncounterMethods__resolvedKey = __key;
            }
        }
        return EncounterMethods;
    }

    public void setEncounterMethods(EncounterMethods EncounterMethods) {
        if (EncounterMethods == null) {
            throw new DaoException("To-one property 'EncounterMethodId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.EncounterMethods = EncounterMethods;
            EncounterMethodId = EncounterMethods.getId();
            EncounterMethods__resolvedKey = EncounterMethodId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
