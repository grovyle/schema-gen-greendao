package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "pokemon_stats".
 */
public class PokemonStats {

    private long PokemonId;
    private long StatId;
    private long BaseStat;
    private long Effort;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PokemonStatsDao myDao;

    private Pokemon Pokemon;
    private Long Pokemon__resolvedKey;

    private Stats Stats;
    private Long Stats__resolvedKey;


    public PokemonStats() {
    }

    public PokemonStats(long PokemonId) {
        this.PokemonId = PokemonId;
    }

    public PokemonStats(long PokemonId, long StatId, long BaseStat, long Effort) {
        this.PokemonId = PokemonId;
        this.StatId = StatId;
        this.BaseStat = BaseStat;
        this.Effort = Effort;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPokemonStatsDao() : null;
    }

    public long getPokemonId() {
        return PokemonId;
    }

    public void setPokemonId(long PokemonId) {
        this.PokemonId = PokemonId;
    }

    public long getStatId() {
        return StatId;
    }

    public void setStatId(long StatId) {
        this.StatId = StatId;
    }

    public long getBaseStat() {
        return BaseStat;
    }

    public void setBaseStat(long BaseStat) {
        this.BaseStat = BaseStat;
    }

    public long getEffort() {
        return Effort;
    }

    public void setEffort(long Effort) {
        this.Effort = Effort;
    }

    /** To-one relationship, resolved on first access. */
    public Pokemon getPokemon() {
        long __key = this.PokemonId;
        if (Pokemon__resolvedKey == null || !Pokemon__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonDao targetDao = daoSession.getPokemonDao();
            Pokemon PokemonNew = targetDao.load(__key);
            synchronized (this) {
                Pokemon = PokemonNew;
            	Pokemon__resolvedKey = __key;
            }
        }
        return Pokemon;
    }

    public void setPokemon(Pokemon Pokemon) {
        if (Pokemon == null) {
            throw new DaoException("To-one property 'PokemonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Pokemon = Pokemon;
            PokemonId = Pokemon.getId();
            Pokemon__resolvedKey = PokemonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Stats getStats() {
        long __key = this.StatId;
        if (Stats__resolvedKey == null || !Stats__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StatsDao targetDao = daoSession.getStatsDao();
            Stats StatsNew = targetDao.load(__key);
            synchronized (this) {
                Stats = StatsNew;
            	Stats__resolvedKey = __key;
            }
        }
        return Stats;
    }

    public void setStats(Stats Stats) {
        if (Stats == null) {
            throw new DaoException("To-one property 'StatId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Stats = Stats;
            StatId = Stats.getId();
            Stats__resolvedKey = StatId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
