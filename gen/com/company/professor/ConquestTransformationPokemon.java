package com.company.professor;

import java.util.List;
import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "conquest_transformation_pokemon".
 */
public class ConquestTransformationPokemon {

    private long TransformationId;
    private long PokemonSpeciesId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConquestTransformationPokemonDao myDao;

    private PokemonSpecies PokemonSpecies;
    private Long PokemonSpecies__resolvedKey;

    private List<ConquestWarriorTransformation> ConquestWarriorTransformation;

    public ConquestTransformationPokemon() {
    }

    public ConquestTransformationPokemon(long TransformationId) {
        this.TransformationId = TransformationId;
    }

    public ConquestTransformationPokemon(long TransformationId, long PokemonSpeciesId) {
        this.TransformationId = TransformationId;
        this.PokemonSpeciesId = PokemonSpeciesId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConquestTransformationPokemonDao() : null;
    }

    public long getTransformationId() {
        return TransformationId;
    }

    public void setTransformationId(long TransformationId) {
        this.TransformationId = TransformationId;
    }

    public long getPokemonSpeciesId() {
        return PokemonSpeciesId;
    }

    public void setPokemonSpeciesId(long PokemonSpeciesId) {
        this.PokemonSpeciesId = PokemonSpeciesId;
    }

    /** To-one relationship, resolved on first access. */
    public PokemonSpecies getPokemonSpecies() {
        long __key = this.PokemonSpeciesId;
        if (PokemonSpecies__resolvedKey == null || !PokemonSpecies__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PokemonSpeciesDao targetDao = daoSession.getPokemonSpeciesDao();
            PokemonSpecies PokemonSpeciesNew = targetDao.load(__key);
            synchronized (this) {
                PokemonSpecies = PokemonSpeciesNew;
            	PokemonSpecies__resolvedKey = __key;
            }
        }
        return PokemonSpecies;
    }

    public void setPokemonSpecies(PokemonSpecies PokemonSpecies) {
        if (PokemonSpecies == null) {
            throw new DaoException("To-one property 'PokemonSpeciesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.PokemonSpecies = PokemonSpecies;
            PokemonSpeciesId = PokemonSpecies.getId();
            PokemonSpecies__resolvedKey = PokemonSpeciesId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ConquestWarriorTransformation> getConquestWarriorTransformation() {
        if (ConquestWarriorTransformation == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestWarriorTransformationDao targetDao = daoSession.getConquestWarriorTransformationDao();
            List<ConquestWarriorTransformation> ConquestWarriorTransformationNew = targetDao._queryConquestTransformationPokemon_ConquestWarriorTransformation(TransformationId);
            synchronized (this) {
                if(ConquestWarriorTransformation == null) {
                    ConquestWarriorTransformation = ConquestWarriorTransformationNew;
                }
            }
        }
        return ConquestWarriorTransformation;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetConquestWarriorTransformation() {
        ConquestWarriorTransformation = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
