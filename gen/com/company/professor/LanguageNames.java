package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "language_names".
 */
public class LanguageNames {

    private long LanguageId;
    private long LocalLanguageId;
    /** Not-null value. */
    private String Name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LanguageNamesDao myDao;

    private Languages Language;
    private Long Language__resolvedKey;

    private Languages LocalLanguage;
    private Long LocalLanguage__resolvedKey;


    public LanguageNames() {
    }

    public LanguageNames(long LanguageId) {
        this.LanguageId = LanguageId;
    }

    public LanguageNames(long LanguageId, long LocalLanguageId, String Name) {
        this.LanguageId = LanguageId;
        this.LocalLanguageId = LocalLanguageId;
        this.Name = Name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLanguageNamesDao() : null;
    }

    public long getLanguageId() {
        return LanguageId;
    }

    public void setLanguageId(long LanguageId) {
        this.LanguageId = LanguageId;
    }

    public long getLocalLanguageId() {
        return LocalLanguageId;
    }

    public void setLocalLanguageId(long LocalLanguageId) {
        this.LocalLanguageId = LocalLanguageId;
    }

    /** Not-null value. */
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String Name) {
        this.Name = Name;
    }

    /** To-one relationship, resolved on first access. */
    public Languages getLanguage() {
        long __key = this.LanguageId;
        if (Language__resolvedKey == null || !Language__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagesDao targetDao = daoSession.getLanguagesDao();
            Languages LanguageNew = targetDao.load(__key);
            synchronized (this) {
                Language = LanguageNew;
            	Language__resolvedKey = __key;
            }
        }
        return Language;
    }

    public void setLanguage(Languages Language) {
        if (Language == null) {
            throw new DaoException("To-one property 'LanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Language = Language;
            LanguageId = Language.getId();
            Language__resolvedKey = LanguageId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Languages getLocalLanguage() {
        long __key = this.LocalLanguageId;
        if (LocalLanguage__resolvedKey == null || !LocalLanguage__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagesDao targetDao = daoSession.getLanguagesDao();
            Languages LocalLanguageNew = targetDao.load(__key);
            synchronized (this) {
                LocalLanguage = LocalLanguageNew;
            	LocalLanguage__resolvedKey = __key;
            }
        }
        return LocalLanguage;
    }

    public void setLocalLanguage(Languages LocalLanguage) {
        if (LocalLanguage == null) {
            throw new DaoException("To-one property 'LocalLanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.LocalLanguage = LocalLanguage;
            LocalLanguageId = LocalLanguage.getId();
            LocalLanguage__resolvedKey = LocalLanguageId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
