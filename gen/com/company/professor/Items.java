package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "items".
 */
public class Items {

    private long Id;
    /** Not-null value. */
    private String Identifier;
    private long CategoryId;
    private long Cost;
    private Long FlingPower;
    private Long FlingEffectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemsDao myDao;

    private ItemCategories ItemCategories;
    private Long ItemCategories__resolvedKey;

    private ItemFlingEffects ItemFlingEffects;
    private Long ItemFlingEffects__resolvedKey;


    public Items() {
    }

    public Items(long Id) {
        this.Id = Id;
    }

    public Items(long Id, String Identifier, long CategoryId, long Cost, Long FlingPower, Long FlingEffectId) {
        this.Id = Id;
        this.Identifier = Identifier;
        this.CategoryId = CategoryId;
        this.Cost = Cost;
        this.FlingPower = FlingPower;
        this.FlingEffectId = FlingEffectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemsDao() : null;
    }

    public long getId() {
        return Id;
    }

    public void setId(long Id) {
        this.Id = Id;
    }

    /** Not-null value. */
    public String getIdentifier() {
        return Identifier;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIdentifier(String Identifier) {
        this.Identifier = Identifier;
    }

    public long getCategoryId() {
        return CategoryId;
    }

    public void setCategoryId(long CategoryId) {
        this.CategoryId = CategoryId;
    }

    public long getCost() {
        return Cost;
    }

    public void setCost(long Cost) {
        this.Cost = Cost;
    }

    public Long getFlingPower() {
        return FlingPower;
    }

    public void setFlingPower(Long FlingPower) {
        this.FlingPower = FlingPower;
    }

    public Long getFlingEffectId() {
        return FlingEffectId;
    }

    public void setFlingEffectId(Long FlingEffectId) {
        this.FlingEffectId = FlingEffectId;
    }

    /** To-one relationship, resolved on first access. */
    public ItemCategories getItemCategories() {
        long __key = this.CategoryId;
        if (ItemCategories__resolvedKey == null || !ItemCategories__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemCategoriesDao targetDao = daoSession.getItemCategoriesDao();
            ItemCategories ItemCategoriesNew = targetDao.load(__key);
            synchronized (this) {
                ItemCategories = ItemCategoriesNew;
            	ItemCategories__resolvedKey = __key;
            }
        }
        return ItemCategories;
    }

    public void setItemCategories(ItemCategories ItemCategories) {
        if (ItemCategories == null) {
            throw new DaoException("To-one property 'CategoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ItemCategories = ItemCategories;
            CategoryId = ItemCategories.getId();
            ItemCategories__resolvedKey = CategoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ItemFlingEffects getItemFlingEffects() {
        Long __key = this.FlingEffectId;
        if (ItemFlingEffects__resolvedKey == null || !ItemFlingEffects__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemFlingEffectsDao targetDao = daoSession.getItemFlingEffectsDao();
            ItemFlingEffects ItemFlingEffectsNew = targetDao.load(__key);
            synchronized (this) {
                ItemFlingEffects = ItemFlingEffectsNew;
            	ItemFlingEffects__resolvedKey = __key;
            }
        }
        return ItemFlingEffects;
    }

    public void setItemFlingEffects(ItemFlingEffects ItemFlingEffects) {
        synchronized (this) {
            this.ItemFlingEffects = ItemFlingEffects;
            FlingEffectId = ItemFlingEffects == null ? null : ItemFlingEffects.getId();
            ItemFlingEffects__resolvedKey = FlingEffectId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
