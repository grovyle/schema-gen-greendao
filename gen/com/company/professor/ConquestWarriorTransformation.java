package com.company.professor;

import com.company.professor.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "conquest_warrior_transformation".
 */
public class ConquestWarriorTransformation {

    private long TransformedWarriorRankId;
    private boolean IsAutomatic;
    private Long RequiredLink;
    private Long CompletedEpisodeId;
    private Long CurrentEpisodeId;
    private Long DistantWarriorId;
    private Long FemaleWarlordCount;
    private Long PokemonCount;
    private Long CollectionTypeId;
    private Long WarriorCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConquestWarriorTransformationDao myDao;

    private ConquestWarriorRanks ConquestWarriorRanks;
    private Long ConquestWarriorRanks__resolvedKey;

    private ConquestEpisodes CompletedEpisode;
    private Long CompletedEpisode__resolvedKey;

    private ConquestEpisodes CurrentEpisode;
    private Long CurrentEpisode__resolvedKey;

    private ConquestWarriors ConquestWarriors;
    private Long ConquestWarriors__resolvedKey;

    private Types Types;
    private Long Types__resolvedKey;


    public ConquestWarriorTransformation() {
    }

    public ConquestWarriorTransformation(long TransformedWarriorRankId) {
        this.TransformedWarriorRankId = TransformedWarriorRankId;
    }

    public ConquestWarriorTransformation(long TransformedWarriorRankId, boolean IsAutomatic, Long RequiredLink, Long CompletedEpisodeId, Long CurrentEpisodeId, Long DistantWarriorId, Long FemaleWarlordCount, Long PokemonCount, Long CollectionTypeId, Long WarriorCount) {
        this.TransformedWarriorRankId = TransformedWarriorRankId;
        this.IsAutomatic = IsAutomatic;
        this.RequiredLink = RequiredLink;
        this.CompletedEpisodeId = CompletedEpisodeId;
        this.CurrentEpisodeId = CurrentEpisodeId;
        this.DistantWarriorId = DistantWarriorId;
        this.FemaleWarlordCount = FemaleWarlordCount;
        this.PokemonCount = PokemonCount;
        this.CollectionTypeId = CollectionTypeId;
        this.WarriorCount = WarriorCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConquestWarriorTransformationDao() : null;
    }

    public long getTransformedWarriorRankId() {
        return TransformedWarriorRankId;
    }

    public void setTransformedWarriorRankId(long TransformedWarriorRankId) {
        this.TransformedWarriorRankId = TransformedWarriorRankId;
    }

    public boolean getIsAutomatic() {
        return IsAutomatic;
    }

    public void setIsAutomatic(boolean IsAutomatic) {
        this.IsAutomatic = IsAutomatic;
    }

    public Long getRequiredLink() {
        return RequiredLink;
    }

    public void setRequiredLink(Long RequiredLink) {
        this.RequiredLink = RequiredLink;
    }

    public Long getCompletedEpisodeId() {
        return CompletedEpisodeId;
    }

    public void setCompletedEpisodeId(Long CompletedEpisodeId) {
        this.CompletedEpisodeId = CompletedEpisodeId;
    }

    public Long getCurrentEpisodeId() {
        return CurrentEpisodeId;
    }

    public void setCurrentEpisodeId(Long CurrentEpisodeId) {
        this.CurrentEpisodeId = CurrentEpisodeId;
    }

    public Long getDistantWarriorId() {
        return DistantWarriorId;
    }

    public void setDistantWarriorId(Long DistantWarriorId) {
        this.DistantWarriorId = DistantWarriorId;
    }

    public Long getFemaleWarlordCount() {
        return FemaleWarlordCount;
    }

    public void setFemaleWarlordCount(Long FemaleWarlordCount) {
        this.FemaleWarlordCount = FemaleWarlordCount;
    }

    public Long getPokemonCount() {
        return PokemonCount;
    }

    public void setPokemonCount(Long PokemonCount) {
        this.PokemonCount = PokemonCount;
    }

    public Long getCollectionTypeId() {
        return CollectionTypeId;
    }

    public void setCollectionTypeId(Long CollectionTypeId) {
        this.CollectionTypeId = CollectionTypeId;
    }

    public Long getWarriorCount() {
        return WarriorCount;
    }

    public void setWarriorCount(Long WarriorCount) {
        this.WarriorCount = WarriorCount;
    }

    /** To-one relationship, resolved on first access. */
    public ConquestWarriorRanks getConquestWarriorRanks() {
        long __key = this.TransformedWarriorRankId;
        if (ConquestWarriorRanks__resolvedKey == null || !ConquestWarriorRanks__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestWarriorRanksDao targetDao = daoSession.getConquestWarriorRanksDao();
            ConquestWarriorRanks ConquestWarriorRanksNew = targetDao.load(__key);
            synchronized (this) {
                ConquestWarriorRanks = ConquestWarriorRanksNew;
            	ConquestWarriorRanks__resolvedKey = __key;
            }
        }
        return ConquestWarriorRanks;
    }

    public void setConquestWarriorRanks(ConquestWarriorRanks ConquestWarriorRanks) {
        if (ConquestWarriorRanks == null) {
            throw new DaoException("To-one property 'TransformedWarriorRankId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ConquestWarriorRanks = ConquestWarriorRanks;
            TransformedWarriorRankId = ConquestWarriorRanks.getId();
            ConquestWarriorRanks__resolvedKey = TransformedWarriorRankId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConquestEpisodes getCompletedEpisode() {
        Long __key = this.CompletedEpisodeId;
        if (CompletedEpisode__resolvedKey == null || !CompletedEpisode__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestEpisodesDao targetDao = daoSession.getConquestEpisodesDao();
            ConquestEpisodes CompletedEpisodeNew = targetDao.load(__key);
            synchronized (this) {
                CompletedEpisode = CompletedEpisodeNew;
            	CompletedEpisode__resolvedKey = __key;
            }
        }
        return CompletedEpisode;
    }

    public void setCompletedEpisode(ConquestEpisodes CompletedEpisode) {
        synchronized (this) {
            this.CompletedEpisode = CompletedEpisode;
            CompletedEpisodeId = CompletedEpisode == null ? null : CompletedEpisode.getId();
            CompletedEpisode__resolvedKey = CompletedEpisodeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConquestEpisodes getCurrentEpisode() {
        Long __key = this.CurrentEpisodeId;
        if (CurrentEpisode__resolvedKey == null || !CurrentEpisode__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestEpisodesDao targetDao = daoSession.getConquestEpisodesDao();
            ConquestEpisodes CurrentEpisodeNew = targetDao.load(__key);
            synchronized (this) {
                CurrentEpisode = CurrentEpisodeNew;
            	CurrentEpisode__resolvedKey = __key;
            }
        }
        return CurrentEpisode;
    }

    public void setCurrentEpisode(ConquestEpisodes CurrentEpisode) {
        synchronized (this) {
            this.CurrentEpisode = CurrentEpisode;
            CurrentEpisodeId = CurrentEpisode == null ? null : CurrentEpisode.getId();
            CurrentEpisode__resolvedKey = CurrentEpisodeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ConquestWarriors getConquestWarriors() {
        Long __key = this.DistantWarriorId;
        if (ConquestWarriors__resolvedKey == null || !ConquestWarriors__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConquestWarriorsDao targetDao = daoSession.getConquestWarriorsDao();
            ConquestWarriors ConquestWarriorsNew = targetDao.load(__key);
            synchronized (this) {
                ConquestWarriors = ConquestWarriorsNew;
            	ConquestWarriors__resolvedKey = __key;
            }
        }
        return ConquestWarriors;
    }

    public void setConquestWarriors(ConquestWarriors ConquestWarriors) {
        synchronized (this) {
            this.ConquestWarriors = ConquestWarriors;
            DistantWarriorId = ConquestWarriors == null ? null : ConquestWarriors.getId();
            ConquestWarriors__resolvedKey = DistantWarriorId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Types getTypes() {
        Long __key = this.CollectionTypeId;
        if (Types__resolvedKey == null || !Types__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TypesDao targetDao = daoSession.getTypesDao();
            Types TypesNew = targetDao.load(__key);
            synchronized (this) {
                Types = TypesNew;
            	Types__resolvedKey = __key;
            }
        }
        return Types;
    }

    public void setTypes(Types Types) {
        synchronized (this) {
            this.Types = Types;
            CollectionTypeId = Types == null ? null : Types.getId();
            Types__resolvedKey = CollectionTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
